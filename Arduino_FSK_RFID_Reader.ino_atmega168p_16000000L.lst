
C:\Users\user0\AppData\Local\Temp\arduino_build_561732/Arduino_FSK_RFID_Reader.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__ctors_end>
       4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      34:	0c 94 be 03 	jmp	0x77c	; 0x77c <__vector_13>
      38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      40:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__vector_16>
      44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      48:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__vector_18>
      4c:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__vector_19>
      50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	2a 2a       	or	r2, r26
      6a:	2a 2a       	or	r2, r26
      6c:	70 61       	ori	r23, 0x10	; 16
      6e:	72 69       	ori	r23, 0x92	; 146
      70:	74 79       	andi	r23, 0x94	; 148
      72:	20 65       	ori	r18, 0x50	; 80
      74:	72 72       	andi	r23, 0x22	; 34
      76:	6f 72       	andi	r22, 0x2F	; 47
      78:	20 66       	ori	r18, 0x60	; 96
      7a:	6f 72       	andi	r22, 0x2F	; 47
      7c:	20 72       	andi	r18, 0x20	; 32
      7e:	65 74       	andi	r22, 0x45	; 69
      80:	72 69       	ori	r23, 0x92	; 146
      82:	65 76       	andi	r22, 0x65	; 101
      84:	65 64       	ori	r22, 0x45	; 69
      86:	20 63       	ori	r18, 0x30	; 48
      88:	6f 64       	ori	r22, 0x4F	; 79
      8a:	65 00       	.word	0x0065	; ????

0000008c <process_buf(int)::__c>:
      8c:	2a 2a 2a 2a 67 6f 74 20 69 6e 76 61 6c 69 64 20     ****got invalid 
      9c:	6d 61 6e 63 68 65 73 74 65 72 20 63 6f 64 65 00     manchester code.

000000ac <process_buf(int)::__c>:
      ac:	63 6f 6e 76 65 72 74 69 6e 67 20 6d 61 6e 63 68     converting manch
      bc:	65 73 74 65 72 20 63 6f 64 65 20 74 6f 20 62 69     ester code to bi
      cc:	6e 61 72 79 2e 2e 2e 00                             nary....

000000d4 <process_buf(int)::__c>:
      d4:	2c 20 76 61 6c 75 65 3a 20 00                       , value: .

000000de <process_buf(int)::__c>:
      de:	2a 2a 2a 2a 67 6f 74 20 62 61 64 20 62 69 74 20     ****got bad bit 
      ee:	70 61 74 74 65 72 6e 20 69 6e 20 62 75 66 66 65     pattern in buffe
      fe:	72 2c 20 63 6f 75 6e 74 3a 20 00                    r, count: .

00000109 <process_buf(int)::__c>:
     109:	67 6f 74 20 65 6e 64 20 74 61 67 00                 got end tag.

00000115 <process_buf(int)::__c>:
     115:	67 6f 74 20 61 20 76 61 6c 69 64 20 70 72 65 66     got a valid pref
     125:	69 78 2c 20 70 72 6f 63 65 73 73 69 6e 67 20 64     ix, processing d
     135:	61 74 61 20 62 75 66 66 65 72 2e 2e 2e 00           ata buffer....

00000143 <loop::__c>:
     143:	6e 6f 20 76 61 6c 69 64 20 64 61 74 61 20 66 6f     no valid data fo
     153:	75 6e 64 20 69 6e 20 62 75 66 66 65 72 00           und in buffer.

00000161 <loop::__c>:
     161:	67 6f 74 20 62 75 66 20 6e 75 6d 3a 20 00           got buf num: .

0000016f <setup::__c>:
     16f:	46 53 4b 20 52 46 49 44 20 52 65 61 64 65 72 2c     FSK RFID Reader,
     17f:	20 78 69 61 6f 6c 61 62 61 20 74 65 73 74 69 6e      xiaolaba testin
     18f:	67 0d 0a 00                                         g...

00000193 <digital_pin_to_timer_PGM>:
     193:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
     1a3:	00 00 00 00 00 00 00                                .......

000001aa <digital_pin_to_bit_mask_PGM>:
     1aa:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     1ba:	04 08 10 20 40 80 40                                ... @.@

000001c1 <digital_pin_to_port_PGM>:
     1c1:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1d1:	03 03 03 03 02 02 03                                .......

000001d8 <port_to_input_PGM>:
     1d8:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001e2 <port_to_output_PGM>:
     1e2:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001ec <port_to_mode_PGM>:
     1ec:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001f6 <__ctors_start>:
__ctors_start():
     1f6:	fe 06       	cpc	r15, r30

000001f8 <__ctors_end>:
__dtors_end():
     1f8:	11 24       	eor	r1, r1
     1fa:	1f be       	out	0x3f, r1	; 63
     1fc:	cf ef       	ldi	r28, 0xFF	; 255
     1fe:	d4 e0       	ldi	r29, 0x04	; 4
     200:	de bf       	out	0x3e, r29	; 62
     202:	cd bf       	out	0x3d, r28	; 61

00000204 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     204:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     206:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     208:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     20a:	ee e6       	ldi	r30, 0x6E	; 110
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     20c:	f1 e1       	ldi	r31, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     20e:	02 c0       	rjmp	.+4      	; 0x214 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     210:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     212:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     214:	a0 33       	cpi	r26, 0x30	; 48
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     216:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     218:	d9 f7       	brne	.-10     	; 0x210 <__do_copy_data+0xc>

0000021a <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     21a:	24 e0       	ldi	r18, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     21c:	a0 e3       	ldi	r26, 0x30	; 48
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     21e:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     220:	01 c0       	rjmp	.+2      	; 0x224 <.do_clear_bss_start>

00000222 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     222:	1d 92       	st	X+, r1

00000224 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     224:	af 39       	cpi	r26, 0x9F	; 159
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     226:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     228:	e1 f7       	brne	.-8      	; 0x222 <.do_clear_bss_loop>

0000022a <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     22a:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     22c:	cc ef       	ldi	r28, 0xFC	; 252
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     22e:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     230:	04 c0       	rjmp	.+8      	; 0x23a <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     232:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     234:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     236:	0e 94 af 08 	call	0x115e	; 0x115e <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     23a:	cb 3f       	cpi	r28, 0xFB	; 251
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     23c:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     23e:	c9 f7       	brne	.-14     	; 0x232 <__do_global_ctors+0x8>
     240:	0e 94 7d 08 	call	0x10fa	; 0x10fa <main>
     244:	0c 94 b5 08 	jmp	0x116a	; 0x116a <_exit>

00000248 <__bad_interrupt>:
__vector_22():
     248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <callback()>:
_Z8callbackv():
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:84
{
  pinMode(ledPin, OUTPUT);      // sets the digital pin 13 as output for scope monitoring
  pinMode(grnLED, OUTPUT);
  pinMode(redLED, OUTPUT);
  digitalWrite(grnLED, 0); // grn off
  digitalWrite(redLED, 1); // red on
     24c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     250:	0e 94 48 05 	call	0xa90	; 0xa90 <digitalRead>
     254:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <val>
     258:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <val+0x1>
     25c:	68 2f       	mov	r22, r24
     25e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ledPin>
     262:	0e 94 1a 05 	call	0xa34	; 0xa34 <digitalWrite>
     266:	20 91 f2 03 	lds	r18, 0x03F2	; 0x8003f2 <bitlenctr>
     26a:	30 91 f3 03 	lds	r19, 0x03F3	; 0x8003f3 <bitlenctr+0x1>
     26e:	2f 5f       	subi	r18, 0xFF	; 255
     270:	3f 4f       	sbci	r19, 0xFF	; 255
     272:	30 93 f3 03 	sts	0x03F3, r19	; 0x8003f3 <bitlenctr+0x1>
     276:	20 93 f2 03 	sts	0x03F2, r18	; 0x8003f2 <bitlenctr>
     27a:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <val>
     27e:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <val+0x1>
     282:	40 91 f0 03 	lds	r20, 0x03F0	; 0x8003f0 <curState>
     286:	50 91 f1 03 	lds	r21, 0x03F1	; 0x8003f1 <curState+0x1>
     28a:	84 17       	cp	r24, r20
     28c:	95 07       	cpc	r25, r21
     28e:	f9 f0       	breq	.+62     	; 0x2ce <callback()+0x82>
     290:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <curState+0x1>
     294:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <curState>
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	c9 f4       	brne	.+50     	; 0x2ce <callback()+0x82>
     29c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <index>
     2a0:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <index+0x1>
     2a4:	8c 3b       	cpi	r24, 0xBC	; 188
     2a6:	42 e0       	ldi	r20, 0x02	; 2
     2a8:	94 07       	cpc	r25, r20
     2aa:	5c f4       	brge	.+22     	; 0x2c2 <callback()+0x76>
     2ac:	ac 01       	movw	r20, r24
     2ae:	4f 5f       	subi	r20, 0xFF	; 255
     2b0:	5f 4f       	sbci	r21, 0xFF	; 255
     2b2:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <index+0x1>
     2b6:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <index>
     2ba:	8c 5c       	subi	r24, 0xCC	; 204
     2bc:	9e 4f       	sbci	r25, 0xFE	; 254
     2be:	fc 01       	movw	r30, r24
     2c0:	20 83       	st	Z, r18
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <bitlenctr+0x1>
     2ca:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <bitlenctr>
     2ce:	08 95       	ret

000002d0 <setup>:
setup():
     2d0:	ff 92       	push	r15
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
_ZN14HardwareSerial5beginEm():
     2da:	26 e0       	ldi	r18, 0x06	; 6
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	52 ec       	ldi	r21, 0xC2	; 194
     2e0:	61 e0       	ldi	r22, 0x01	; 1
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	82 e0       	ldi	r24, 0x02	; 2
     2e6:	94 e0       	ldi	r25, 0x04	; 4
     2e8:	0e 94 44 06 	call	0xc88	; 0xc88 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
     2ec:	6f e6       	ldi	r22, 0x6F	; 111
     2ee:	71 e0       	ldi	r23, 0x01	; 1
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	94 e0       	ldi	r25, 0x04	; 4
     2f4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <Print::println(__FlashStringHelper const*)>
     2f8:	68 e8       	ldi	r22, 0x88	; 136
     2fa:	73 e1       	ldi	r23, 0x13	; 19
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 54 04 	call	0x8a8	; 0x8a8 <delay>
_ZN8TimerOne10initializeEm():
     304:	c1 e8       	ldi	r28, 0x81	; 129
     306:	d0 e0       	ldi	r29, 0x00	; 0
     308:	80 e1       	ldi	r24, 0x10	; 16
     30a:	88 83       	st	Y, r24
     30c:	00 e8       	ldi	r16, 0x80	; 128
     30e:	10 e0       	ldi	r17, 0x00	; 0
     310:	f8 01       	movw	r30, r16
     312:	10 82       	st	Z, r1
_ZN8TimerOne9setPeriodEm():
     314:	ff 24       	eor	r15, r15
     316:	f3 94       	inc	r15
     318:	f0 92 f6 03 	sts	0x03F6, r15	; 0x8003f6 <TimerOne::clockSelectBits>
     31c:	88 e3       	ldi	r24, 0x38	; 56
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <TimerOne::pwmPeriod+0x1>
     324:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <TimerOne::pwmPeriod>
     328:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     32c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
     330:	81 e1       	ldi	r24, 0x11	; 17
     332:	88 83       	st	Y, r24
_ZN8TimerOne3pwmEcj():
     334:	61 e0       	ldi	r22, 0x01	; 1
     336:	89 e0       	ldi	r24, 0x09	; 9
     338:	0e 94 de 04 	call	0x9bc	; 0x9bc <pinMode>
     33c:	f8 01       	movw	r30, r16
     33e:	80 81       	ld	r24, Z
     340:	80 68       	ori	r24, 0x80	; 128
     342:	80 83       	st	Z, r24
_ZN8TimerOne10setPwmDutyEcj():
     344:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <TimerOne::pwmPeriod>
     348:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <TimerOne::pwmPeriod+0x1>
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	a0 e0       	ldi	r26, 0x00	; 0
     350:	b6 95       	lsr	r27
     352:	a7 95       	ror	r26
     354:	97 95       	ror	r25
     356:	87 95       	ror	r24
     358:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     35c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
_ZN8TimerOne3pwmEcj():
     360:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <TimerOne::clockSelectBits>
     364:	80 61       	ori	r24, 0x10	; 16
     366:	88 83       	st	Y, r24
_ZN8TimerOne15attachInterruptEPFvvE():
     368:	86 e2       	ldi	r24, 0x26	; 38
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <TimerOne::isrCallback+0x1>
     370:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <TimerOne::isrCallback>
     374:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
setup():
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <pinMode>

0000038c <err_flash(int)>:
_Z9err_flashi():
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:308
    err_flash(3);
  }  
}

// flash red for duration seconds
void err_flash(int duration) {
     38c:	ef 92       	push	r14
     38e:	ff 92       	push	r15
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:311
//  return;

  for(int i = 0; i < duration*10; i++) {
     396:	2a e0       	ldi	r18, 0x0A	; 10
     398:	28 9f       	mul	r18, r24
     39a:	70 01       	movw	r14, r0
     39c:	29 9f       	mul	r18, r25
     39e:	f0 0c       	add	r15, r0
     3a0:	11 24       	eor	r1, r1
     3a2:	d0 e0       	ldi	r29, 0x00	; 0
     3a4:	c0 e0       	ldi	r28, 0x00	; 0
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:312
    LEDport ^= (1<< redLED);
     3a6:	10 e1       	ldi	r17, 0x10	; 16
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:311 (discriminator 3)

// flash red for duration seconds
void err_flash(int duration) {
//  return;

  for(int i = 0; i < duration*10; i++) {
     3a8:	ce 15       	cp	r28, r14
     3aa:	df 05       	cpc	r29, r15
     3ac:	5c f4       	brge	.+22     	; 0x3c4 <err_flash(int)+0x38>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:312 (discriminator 2)
    LEDport ^= (1<< redLED);
     3ae:	85 b1       	in	r24, 0x05	; 5
     3b0:	81 27       	eor	r24, r17
     3b2:	85 b9       	out	0x05, r24	; 5
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:313 (discriminator 2)
    delay(100);
     3b4:	64 e6       	ldi	r22, 0x64	; 100
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 54 04 	call	0x8a8	; 0x8a8 <delay>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:311 (discriminator 2)

// flash red for duration seconds
void err_flash(int duration) {
//  return;

  for(int i = 0; i < duration*10; i++) {
     3c0:	21 96       	adiw	r28, 0x01	; 1
     3c2:	f2 cf       	rjmp	.-28     	; 0x3a8 <err_flash(int)+0x1c>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:323
    digitalWrite(redLED, 0);
    delay(50);
    digitalWrite(redLED, 1);
    delay(50);
  } 
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	ff 90       	pop	r15
     3cc:	ef 90       	pop	r14
     3ce:	08 95       	ret

000003d0 <process_buf(int)>:
_Z11process_bufi():
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:216
  }  
}

// process an input buffer with a valid start tag
// start argument is index to first 0 bit past prefix tag of 15+ ones
void process_buf(int start) {
     3d0:	4f 92       	push	r4
     3d2:	5f 92       	push	r5
     3d4:	6f 92       	push	r6
     3d6:	7f 92       	push	r7
     3d8:	af 92       	push	r10
     3da:	bf 92       	push	r11
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
     3f0:	c8 58       	subi	r28, 0x88	; 136
     3f2:	d1 09       	sbc	r29, r1
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	de bf       	out	0x3e, r29	; 62
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	cd bf       	out	0x3d, r28	; 61
     3fe:	8c 01       	movw	r16, r24
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:224
  int samecnt = 0;
  char manch[91];
  char final[45];
  int manchindex = 0;

  Serial.println(F("got a valid prefix, processing data buffer..."));
     400:	65 e1       	ldi	r22, 0x15	; 21
     402:	71 e0       	ldi	r23, 0x01	; 1
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	94 e0       	ldi	r25, 0x04	; 4
     408:	0e 94 9e 07 	call	0xf3c	; 0xf3c <Print::println(__FlashStringHelper const*)>
     40c:	f8 01       	movw	r30, r16
     40e:	eb 5c       	subi	r30, 0xCB	; 203
     410:	fe 4f       	sbci	r31, 0xFE	; 254
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:222
  // first convert multi bit codes (11111100000...) into manchester bit codes
  int lastv = 0;
  int samecnt = 0;
  char manch[91];
  char final[45];
  int manchindex = 0;
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	20 e0       	ldi	r18, 0x00	; 0
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:219
// process an input buffer with a valid start tag
// start argument is index to first 0 bit past prefix tag of 15+ ones
void process_buf(int start) {
  // first convert multi bit codes (11111100000...) into manchester bit codes
  int lastv = 0;
  int samecnt = 0;
     416:	f1 2c       	mov	r15, r1
     418:	e1 2c       	mov	r14, r1
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:218

// process an input buffer with a valid start tag
// start argument is index to first 0 bit past prefix tag of 15+ ones
void process_buf(int start) {
  // first convert multi bit codes (11111100000...) into manchester bit codes
  int lastv = 0;
     41a:	10 e0       	ldi	r17, 0x00	; 0
     41c:	00 e0       	ldi	r16, 0x00	; 0
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:225 (discriminator 1)
  char manch[91];
  char final[45];
  int manchindex = 0;

  Serial.println(F("got a valid prefix, processing data buffer..."));
  for(int i = start + 1; i < maxBuf && manchindex < 90; i++) {
     41e:	cf 01       	movw	r24, r30
     420:	84 53       	subi	r24, 0x34	; 52
     422:	91 40       	sbci	r25, 0x01	; 1
     424:	8c 3b       	cpi	r24, 0xBC	; 188
     426:	92 40       	sbci	r25, 0x02	; 2
     428:	0c f0       	brlt	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	4b c0       	rjmp	.+150    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:225 (discriminator 2)
     42c:	2a 35       	cpi	r18, 0x5A	; 90
     42e:	31 05       	cpc	r19, r1
     430:	0c f0       	brlt	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	47 c0       	rjmp	.+142    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:226
    if(raw[i] == lastv) {
     434:	81 91       	ld	r24, Z+
     436:	08 2e       	mov	r0, r24
     438:	00 0c       	add	r0, r0
     43a:	99 0b       	sbc	r25, r25
     43c:	80 17       	cp	r24, r16
     43e:	91 07       	cpc	r25, r17
     440:	29 f4       	brne	.+10     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:227
      samecnt++;
     442:	5f ef       	ldi	r21, 0xFF	; 255
     444:	e5 1a       	sub	r14, r21
     446:	f5 0a       	sbc	r15, r21
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:226 (discriminator 3)
  char final[45];
  int manchindex = 0;

  Serial.println(F("got a valid prefix, processing data buffer..."));
  for(int i = start + 1; i < maxBuf && manchindex < 90; i++) {
    if(raw[i] == lastv) {
     448:	8c 01       	movw	r16, r24
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:225 (discriminator 3)
  char manch[91];
  char final[45];
  int manchindex = 0;

  Serial.println(F("got a valid prefix, processing data buffer..."));
  for(int i = start + 1; i < maxBuf && manchindex < 90; i++) {
     44a:	e9 cf       	rjmp	.-46     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:231
    if(raw[i] == lastv) {
      samecnt++;
    } 
    else {
      // got a new bit value, process the last group
      if(samecnt >= 3 && samecnt <= 8) {
     44c:	a7 01       	movw	r20, r14
     44e:	43 50       	subi	r20, 0x03	; 3
     450:	51 09       	sbc	r21, r1
     452:	46 30       	cpi	r20, 0x06	; 6
     454:	51 05       	cpc	r21, r1
     456:	68 f4       	brcc	.+26     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:232
        manch[manchindex++] = lastv;
     458:	a1 e0       	ldi	r26, 0x01	; 1
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	ac 0f       	add	r26, r28
     45e:	bd 1f       	adc	r27, r29
     460:	a2 0f       	add	r26, r18
     462:	b3 1f       	adc	r27, r19
     464:	0c 93       	st	X, r16
     466:	2f 5f       	subi	r18, 0xFF	; 255
     468:	3f 4f       	sbci	r19, 0xFF	; 255
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:253
        Serial.print(F(", value: "));
        Serial.println(lastv);
        err_flash(3);
        return;
      }  
      samecnt = 1;
     46a:	ee 24       	eor	r14, r14
     46c:	e3 94       	inc	r14
     46e:	f1 2c       	mov	r15, r1
     470:	eb cf       	rjmp	.-42     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:234
    else {
      // got a new bit value, process the last group
      if(samecnt >= 3 && samecnt <= 8) {
        manch[manchindex++] = lastv;
      } 
      else if(samecnt >= 9 && samecnt <= 14) {
     472:	a7 01       	movw	r20, r14
     474:	49 50       	subi	r20, 0x09	; 9
     476:	51 09       	sbc	r21, r1
     478:	46 30       	cpi	r20, 0x06	; 6
     47a:	51 05       	cpc	r21, r1
     47c:	98 f4       	brcc	.+38     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:236
        // assume a double bit, so record as two separate bits
        manch[manchindex++] = lastv;
     47e:	a1 e0       	ldi	r26, 0x01	; 1
     480:	b0 e0       	ldi	r27, 0x00	; 0
     482:	ac 0f       	add	r26, r28
     484:	bd 1f       	adc	r27, r29
     486:	a2 0f       	add	r26, r18
     488:	b3 1f       	adc	r27, r19
     48a:	0c 93       	st	X, r16
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:237
        manch[manchindex++] = lastv;
     48c:	d9 01       	movw	r26, r18
     48e:	11 96       	adiw	r26, 0x01	; 1
     490:	41 e0       	ldi	r20, 0x01	; 1
     492:	50 e0       	ldi	r21, 0x00	; 0
     494:	4c 0f       	add	r20, r28
     496:	5d 1f       	adc	r21, r29
     498:	a4 0f       	add	r26, r20
     49a:	b5 1f       	adc	r27, r21
     49c:	2e 5f       	subi	r18, 0xFE	; 254
     49e:	3f 4f       	sbci	r19, 0xFF	; 255
     4a0:	0c 93       	st	X, r16
     4a2:	e3 cf       	rjmp	.-58     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:239
      } 
      else if(samecnt >= 15 && lastv == 0) {
     4a4:	5f e0       	ldi	r21, 0x0F	; 15
     4a6:	e5 16       	cp	r14, r21
     4a8:	f1 04       	cpc	r15, r1
     4aa:	0c f4       	brge	.+2      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4ac:	94 c0       	rjmp	.+296    	; 0x5d6 <__stack+0xd7>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:239 (discriminator 1)
     4ae:	01 15       	cp	r16, r1
     4b0:	11 05       	cpc	r17, r1
     4b2:	09 f0       	breq	.+2      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b4:	90 c0       	rjmp	.+288    	; 0x5d6 <__stack+0xd7>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:240
        Serial.println(F("got end tag"));
     4b6:	69 e0       	ldi	r22, 0x09	; 9
     4b8:	71 e0       	ldi	r23, 0x01	; 1
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	94 e0       	ldi	r25, 0x04	; 4
     4be:	0e 94 9e 07 	call	0xf3c	; 0xf3c <Print::println(__FlashStringHelper const*)>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:258
      samecnt = 1;
      lastv = raw[i];
    } //new bit pattern
  }

  Serial.println(F("converting manchester code to binary..."));
     4c2:	6c ea       	ldi	r22, 0xAC	; 172
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	94 e0       	ldi	r25, 0x04	; 4
     4ca:	0e 94 9e 07 	call	0xf3c	; 0xf3c <Print::println(__FlashStringHelper const*)>
     4ce:	fe 01       	movw	r30, r28
     4d0:	31 96       	adiw	r30, 0x01	; 1
     4d2:	8e 01       	movw	r16, r28
     4d4:	04 5a       	subi	r16, 0xA4	; 164
     4d6:	1f 4f       	sbci	r17, 0xFF	; 255
     4d8:	9e 01       	movw	r18, r28
     4da:	25 5a       	subi	r18, 0xA5	; 165
     4dc:	3f 4f       	sbci	r19, 0xFF	; 255
     4de:	d8 01       	movw	r26, r16
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:261
  // got manchester version, convert to final bits
  for(int i = 0, findex = 0; i < 90; i += 2, findex++) {
    if(manch[i] == 1 && manch[i+1] == 0) {
     4e0:	80 81       	ld	r24, Z
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4e6:	aa c0       	rjmp	.+340    	; 0x63c <__stack+0x13d>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:261 (discriminator 1)
     4e8:	91 81       	ldd	r25, Z+1	; 0x01
     4ea:	91 11       	cpse	r25, r1
     4ec:	ae c0       	rjmp	.+348    	; 0x64a <__stack+0x14b>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:262
      final[findex] = 1;
     4ee:	8c 93       	st	X, r24
     4f0:	32 96       	adiw	r30, 0x02	; 2
     4f2:	11 96       	adiw	r26, 0x01	; 1
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:260 (discriminator 2)
    } //new bit pattern
  }

  Serial.println(F("converting manchester code to binary..."));
  // got manchester version, convert to final bits
  for(int i = 0, findex = 0; i < 90; i += 2, findex++) {
     4f4:	e2 17       	cp	r30, r18
     4f6:	f3 07       	cpc	r31, r19
     4f8:	99 f7       	brne	.-26     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4fa:	f8 01       	movw	r30, r16
     4fc:	79 96       	adiw	r30, 0x19	; 25
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:279

  // the unique ID which is printed on the badges is 19bits
  // and starts from position 26
  unsigned long code = 0;
  int par = 0;
  for(int i = 25, k = 18; i < 25+19; i++, k--) {
     4fe:	22 e1       	ldi	r18, 0x12	; 18
     500:	30 e0       	ldi	r19, 0x00	; 0
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:277
    }
  }

  // the unique ID which is printed on the badges is 19bits
  // and starts from position 26
  unsigned long code = 0;
     502:	41 2c       	mov	r4, r1
     504:	51 2c       	mov	r5, r1
     506:	32 01       	movw	r6, r4
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:280 (discriminator 2)
  int par = 0;
  for(int i = 25, k = 18; i < 25+19; i++, k--) {
    code |= (unsigned long)final[i] << k;
     508:	81 91       	ld	r24, Z+
     50a:	08 2e       	mov	r0, r24
     50c:	00 0c       	add	r0, r0
     50e:	99 0b       	sbc	r25, r25
     510:	aa 0b       	sbc	r26, r26
     512:	bb 0b       	sbc	r27, r27
     514:	02 2e       	mov	r0, r18
     516:	04 c0       	rjmp	.+8      	; 0x520 <__stack+0x21>
     518:	88 0f       	add	r24, r24
     51a:	99 1f       	adc	r25, r25
     51c:	aa 1f       	adc	r26, r26
     51e:	bb 1f       	adc	r27, r27
     520:	0a 94       	dec	r0
     522:	d2 f7       	brpl	.-12     	; 0x518 <__stack+0x19>
     524:	48 2a       	or	r4, r24
     526:	59 2a       	or	r5, r25
     528:	6a 2a       	or	r6, r26
     52a:	7b 2a       	or	r7, r27
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:279 (discriminator 2)

  // the unique ID which is printed on the badges is 19bits
  // and starts from position 26
  unsigned long code = 0;
  int par = 0;
  for(int i = 25, k = 18; i < 25+19; i++, k--) {
     52c:	21 50       	subi	r18, 0x01	; 1
     52e:	31 09       	sbc	r19, r1
     530:	58 f7       	brcc	.-42     	; 0x508 <__stack+0x9>
     532:	58 01       	movw	r10, r16
     534:	ed e2       	ldi	r30, 0x2D	; 45
     536:	ae 0e       	add	r10, r30
     538:	b1 1c       	adc	r11, r1
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:278
  }

  // the unique ID which is printed on the badges is 19bits
  // and starts from position 26
  unsigned long code = 0;
  int par = 0;
     53a:	d1 2c       	mov	r13, r1
     53c:	c1 2c       	mov	r12, r1
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:283
  for(int i = 25, k = 18; i < 25+19; i++, k--) {
    code |= (unsigned long)final[i] << k;
  }
  for(int i = 0; i < 45; i++) {
    Serial.print(final[i] ? "1" : "0");
     53e:	f8 01       	movw	r30, r16
     540:	e1 90       	ld	r14, Z+
     542:	8f 01       	movw	r16, r30
     544:	66 e0       	ldi	r22, 0x06	; 6
     546:	71 e0       	ldi	r23, 0x01	; 1
     548:	e1 10       	cpse	r14, r1
     54a:	02 c0       	rjmp	.+4      	; 0x550 <__stack+0x51>
     54c:	68 e0       	ldi	r22, 0x08	; 8
     54e:	71 e0       	ldi	r23, 0x01	; 1
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:283 (discriminator 4)
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	94 e0       	ldi	r25, 0x04	; 4
     554:	0e 94 8b 07 	call	0xf16	; 0xf16 <Print::print(char const*)>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:284 (discriminator 4)
    par ^= final[i];
     558:	0e 2c       	mov	r0, r14
     55a:	00 0c       	add	r0, r0
     55c:	ff 08       	sbc	r15, r15
     55e:	c7 01       	movw	r24, r14
     560:	8c 25       	eor	r24, r12
     562:	9d 25       	eor	r25, r13
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:282 (discriminator 4)
  unsigned long code = 0;
  int par = 0;
  for(int i = 25, k = 18; i < 25+19; i++, k--) {
    code |= (unsigned long)final[i] << k;
  }
  for(int i = 0; i < 45; i++) {
     564:	a0 16       	cp	r10, r16
     566:	b1 06       	cpc	r11, r17
     568:	09 f0       	breq	.+2      	; 0x56c <__stack+0x6d>
     56a:	76 c0       	rjmp	.+236    	; 0x658 <__stack+0x159>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:286
    Serial.print(final[i] ? "1" : "0");
    par ^= final[i];
  }
  Serial.println();
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	94 e0       	ldi	r25, 0x04	; 4
     570:	0e 94 9a 07 	call	0xf34	; 0xf34 <Print::println()>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:287
  if(par) {  
     574:	ec 14       	cp	r14, r12
     576:	fd 04       	cpc	r15, r13
     578:	09 f4       	brne	.+2      	; 0x57c <__stack+0x7d>
     57a:	70 c0       	rjmp	.+224    	; 0x65c <__stack+0x15d>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:288
    Serial.print("got valid code: ");
     57c:	6a e0       	ldi	r22, 0x0A	; 10
     57e:	71 e0       	ldi	r23, 0x01	; 1
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	94 e0       	ldi	r25, 0x04	; 4
     584:	0e 94 8b 07 	call	0xf16	; 0xf16 <Print::print(char const*)>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:289
    Serial.println((unsigned long)code);
     588:	2a e0       	ldi	r18, 0x0A	; 10
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	b3 01       	movw	r22, r6
     58e:	a2 01       	movw	r20, r4
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	94 e0       	ldi	r25, 0x04	; 4
     594:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Print::println(unsigned long, int)>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:293
    // do something here with the detected code...
    // 
    //
    LEDport ^= (1<<redLED) | (1<<grnLED); // toggle LEDs; initial, red on, grn off
     598:	85 b1       	in	r24, 0x05	; 5
     59a:	98 e1       	ldi	r25, 0x18	; 24
     59c:	89 27       	eor	r24, r25
     59e:	85 b9       	out	0x05, r24	; 5
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:294
    delay(2000);
     5a0:	60 ed       	ldi	r22, 0xD0	; 208
     5a2:	77 e0       	ldi	r23, 0x07	; 7
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:305
  } 
  else {
    Serial.println(F("****parity error for retrieved code"));
    err_flash(3);
  }  
}
     5a8:	c8 57       	subi	r28, 0x78	; 120
     5aa:	df 4f       	sbci	r29, 0xFF	; 255
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	7f 90       	pop	r7
     5cc:	6f 90       	pop	r6
     5ce:	5f 90       	pop	r5
     5d0:	4f 90       	pop	r4
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:294
    Serial.println((unsigned long)code);
    // do something here with the detected code...
    // 
    //
    LEDport ^= (1<<redLED) | (1<<grnLED); // toggle LEDs; initial, red on, grn off
    delay(2000);
     5d2:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <delay>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:246
        // got an end tag, exit
        break;
      } 
      else {
        // last bit group was either too long or too short
        Serial.print(F("****got bad bit pattern in buffer, count: "));
     5d6:	6e ed       	ldi	r22, 0xDE	; 222
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	82 e0       	ldi	r24, 0x02	; 2
     5dc:	94 e0       	ldi	r25, 0x04	; 4
     5de:	0e 94 67 07 	call	0xece	; 0xece <Print::print(__FlashStringHelper const*)>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:247
        Serial.print(samecnt);
     5e2:	4a e0       	ldi	r20, 0x0A	; 10
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	b7 01       	movw	r22, r14
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	94 e0       	ldi	r25, 0x04	; 4
     5ec:	0e 94 44 08 	call	0x1088	; 0x1088 <Print::print(int, int)>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:248
        Serial.print(F(", value: "));
     5f0:	64 ed       	ldi	r22, 0xD4	; 212
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	94 e0       	ldi	r25, 0x04	; 4
     5f8:	0e 94 67 07 	call	0xece	; 0xece <Print::print(__FlashStringHelper const*)>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:249
        Serial.println(lastv);
     5fc:	4a e0       	ldi	r20, 0x0A	; 10
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	b8 01       	movw	r22, r16
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	94 e0       	ldi	r25, 0x04	; 4
     606:	0e 94 4b 08 	call	0x1096	; 0x1096 <Print::println(int, int)>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:303
//    digitalWrite(redLED, 1);
//    digitalWrite(grnLED, 0);
  } 
  else {
    Serial.println(F("****parity error for retrieved code"));
    err_flash(3);
     60a:	83 e0       	ldi	r24, 0x03	; 3
     60c:	90 e0       	ldi	r25, 0x00	; 0
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:305
  }  
}
     60e:	c8 57       	subi	r28, 0x78	; 120
     610:	df 4f       	sbci	r29, 0xFF	; 255
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	df 90       	pop	r13
     62a:	cf 90       	pop	r12
     62c:	bf 90       	pop	r11
     62e:	af 90       	pop	r10
     630:	7f 90       	pop	r7
     632:	6f 90       	pop	r6
     634:	5f 90       	pop	r5
     636:	4f 90       	pop	r4
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:303
//    digitalWrite(redLED, 1);
//    digitalWrite(grnLED, 0);
  } 
  else {
    Serial.println(F("****parity error for retrieved code"));
    err_flash(3);
     638:	0c 94 c6 01 	jmp	0x38c	; 0x38c <err_flash(int)>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:264
  // got manchester version, convert to final bits
  for(int i = 0, findex = 0; i < 90; i += 2, findex++) {
    if(manch[i] == 1 && manch[i+1] == 0) {
      final[findex] = 1;
    } 
    else if(manch[i] == 0 && manch[i+1] == 1) {
     63c:	81 11       	cpse	r24, r1
     63e:	05 c0       	rjmp	.+10     	; 0x64a <__stack+0x14b>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:264 (discriminator 1)
     640:	81 81       	ldd	r24, Z+1	; 0x01
     642:	81 30       	cpi	r24, 0x01	; 1
     644:	11 f4       	brne	.+4      	; 0x64a <__stack+0x14b>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:265
      final[findex] = 0;
     646:	1c 92       	st	X, r1
     648:	53 cf       	rjmp	.-346    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:269
    } 
    else {
      // invalid manchester code, exit
      Serial.println(F("****got invalid manchester code"));
     64a:	6c e8       	ldi	r22, 0x8C	; 140
     64c:	70 e0       	ldi	r23, 0x00	; 0
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:302
//    delay(2000);
//    digitalWrite(redLED, 1);
//    digitalWrite(grnLED, 0);
  } 
  else {
    Serial.println(F("****parity error for retrieved code"));
     64e:	82 e0       	ldi	r24, 0x02	; 2
     650:	94 e0       	ldi	r25, 0x04	; 4
     652:	0e 94 9e 07 	call	0xf3c	; 0xf3c <Print::println(__FlashStringHelper const*)>
     656:	d9 cf       	rjmp	.-78     	; 0x60a <__stack+0x10b>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:284
  for(int i = 25, k = 18; i < 25+19; i++, k--) {
    code |= (unsigned long)final[i] << k;
  }
  for(int i = 0; i < 45; i++) {
    Serial.print(final[i] ? "1" : "0");
    par ^= final[i];
     658:	6c 01       	movw	r12, r24
     65a:	71 cf       	rjmp	.-286    	; 0x53e <__stack+0x3f>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:302
//    delay(2000);
//    digitalWrite(redLED, 1);
//    digitalWrite(grnLED, 0);
  } 
  else {
    Serial.println(F("****parity error for retrieved code"));
     65c:	68 e6       	ldi	r22, 0x68	; 104
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	f6 cf       	rjmp	.-20     	; 0x64e <__stack+0x14f>

00000662 <loop>:
loop():
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:108
  }  
}

void loop()
{  
  if(index >= maxBuf) {
     662:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <index>
     666:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <index+0x1>
     66a:	8c 3b       	cpi	r24, 0xBC	; 188
     66c:	92 40       	sbci	r25, 0x02	; 2
     66e:	0c f4       	brge	.+2      	; 0x672 <loop+0x10>
     670:	7e c0       	rjmp	.+252    	; 0x76e <loop+0x10c>
_ZN8TimerOne15detachInterruptEv():
C:\Users\user0\Documents\Arduino\libraries\TimerOne/TimerOne.h:288
    void attachInterrupt(void (*isr)(), unsigned long microseconds) __attribute__((always_inline)) {
	if(microseconds > 0) setPeriod(microseconds);
	attachInterrupt(isr);
    }
    void detachInterrupt() __attribute__((always_inline)) {
	TIMSK1 = 0;
     672:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
loop():
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:111
    // detach the interrupt or otherwise nothing will be printed on the serial port
    Timer1.detachInterrupt();
    Serial.print(F("got buf num: "));
     676:	61 e6       	ldi	r22, 0x61	; 97
     678:	71 e0       	ldi	r23, 0x01	; 1
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	94 e0       	ldi	r25, 0x04	; 4
     67e:	0e 94 67 07 	call	0xece	; 0xece <Print::print(__FlashStringHelper const*)>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:112
    Serial.println(bufnum);
     682:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
     686:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__data_end+0x1>
     68a:	4a e0       	ldi	r20, 0x0A	; 10
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	94 e0       	ldi	r25, 0x04	; 4
     692:	0e 94 4b 08 	call	0x1096	; 0x1096 <Print::println(int, int)>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:129
    // first convert pulse durations into raw bits
    int tot1 = 0;
    int tot0 = 0;
    int tote = 0;
    int totp = 0;
    raw[0] = 0;
     696:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <raw>
     69a:	a4 e3       	ldi	r26, 0x34	; 52
     69c:	b1 e0       	ldi	r27, 0x01	; 1
     69e:	fd 01       	movw	r30, r26
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:152
      //else if(v == 8 || v == 9) {
      // raw[i] = 0;
      // tot0++;
      //}
      else {
        raw[i] = 101; // error code
     6a0:	25 e6       	ldi	r18, 0x65	; 101
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:141
      else if(v == 5) {
        raw[i] = raw[i - 1];
        totp++;
      } 
      else if(v == 6 || v == 7) {
        raw[i] = 1;
     6a2:	31 e0       	ldi	r19, 0x01	; 1
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:131
    int tot0 = 0;
    int tote = 0;
    int totp = 0;
    raw[0] = 0;
    for(int i = 1; i < maxBuf; i++) {
      int v = raw[i];
     6a4:	81 81       	ldd	r24, Z+1	; 0x01
     6a6:	08 2e       	mov	r0, r24
     6a8:	00 0c       	add	r0, r0
     6aa:	99 0b       	sbc	r25, r25
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:132
      if(v == 4) {
     6ac:	84 30       	cpi	r24, 0x04	; 4
     6ae:	91 05       	cpc	r25, r1
     6b0:	09 f0       	breq	.+2      	; 0x6b4 <loop+0x52>
     6b2:	40 c0       	rjmp	.+128    	; 0x734 <loop+0xd2>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:133
        raw[i] = 0;
     6b4:	11 82       	std	Z+1, r1	; 0x01
     6b6:	31 96       	adiw	r30, 0x01	; 1
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:130 (discriminator 2)
    int tot1 = 0;
    int tot0 = 0;
    int tote = 0;
    int totp = 0;
    raw[0] = 0;
    for(int i = 1; i < maxBuf; i++) {
     6b8:	43 e0       	ldi	r20, 0x03	; 3
     6ba:	ef 3e       	cpi	r30, 0xEF	; 239
     6bc:	f4 07       	cpc	r31, r20
     6be:	91 f7       	brne	.-28     	; 0x6a4 <loop+0x42>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:161

    // next, search for a "start tag" of 15 high bits in a row
    int samecnt = 0;
    int start = -1;
    int lastv = 0;
    for(int i = 0; i < maxBuf; i++) {
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	80 e0       	ldi	r24, 0x00	; 0
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:160
    }   

    // next, search for a "start tag" of 15 high bits in a row
    int samecnt = 0;
    int start = -1;
    int lastv = 0;
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	60 e0       	ldi	r22, 0x00	; 0
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:158
        tote++;
      }  
    }   

    // next, search for a "start tag" of 15 high bits in a row
    int samecnt = 0;
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	20 e0       	ldi	r18, 0x00	; 0
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:162
    int start = -1;
    int lastv = 0;
    for(int i = 0; i < maxBuf; i++) {
      if(raw[i] == lastv) {
     6cc:	4d 91       	ld	r20, X+
     6ce:	04 2e       	mov	r0, r20
     6d0:	00 0c       	add	r0, r0
     6d2:	55 0b       	sbc	r21, r21
     6d4:	46 17       	cp	r20, r22
     6d6:	57 07       	cpc	r21, r23
     6d8:	d1 f5       	brne	.+116    	; 0x74e <loop+0xec>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:164
        // inside one same bit pattern, keep scanning
        samecnt++;
     6da:	2f 5f       	subi	r18, 0xFF	; 255
     6dc:	3f 4f       	sbci	r19, 0xFF	; 255
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:161 (discriminator 2)

    // next, search for a "start tag" of 15 high bits in a row
    int samecnt = 0;
    int start = -1;
    int lastv = 0;
    for(int i = 0; i < maxBuf; i++) {
     6de:	01 96       	adiw	r24, 0x01	; 1
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:162 (discriminator 2)
      if(raw[i] == lastv) {
     6e0:	ba 01       	movw	r22, r20
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:161 (discriminator 2)

    // next, search for a "start tag" of 15 high bits in a row
    int samecnt = 0;
    int start = -1;
    int lastv = 0;
    for(int i = 0; i < maxBuf; i++) {
     6e2:	8c 3b       	cpi	r24, 0xBC	; 188
     6e4:	42 e0       	ldi	r20, 0x02	; 2
     6e6:	94 07       	cpc	r25, r20
     6e8:	89 f7       	brne	.-30     	; 0x6cc <loop+0x6a>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:159
      }  
    }   

    // next, search for a "start tag" of 15 high bits in a row
    int samecnt = 0;
    int start = -1;
     6ea:	8f ef       	ldi	r24, 0xFF	; 255
     6ec:	9f ef       	ldi	r25, 0xFF	; 255
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:180
        lastv = raw[i];
      }  
    }

    // if a valid prefix tag was found, process the buffer
    if(start > 0 && start < (maxBuf - 5*90)) { //adjust to allow room for full dataset past start point
     6ee:	9c 01       	movw	r18, r24
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	31 09       	sbc	r19, r1
     6f4:	29 3f       	cpi	r18, 0xF9	; 249
     6f6:	31 05       	cpc	r19, r1
     6f8:	98 f5       	brcc	.+102    	; 0x760 <loop+0xfe>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:181
      process_buf(start);
     6fa:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <process_buf(int)>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:203
      Serial.println(tote);  
      delay(1000);
    }

    // start new buffer, reset all parameters
    bufnum++;
     6fe:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     702:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
     70c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:204
    curState = 0;
     710:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <curState+0x1>
     714:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <curState>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:205
    index = 0;
     718:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <index+0x1>
     71c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <index>
_ZN8TimerOne15attachInterruptEPFvvE():
C:\Users\user0\Documents\Arduino\libraries\TimerOne/TimerOne.h:280
    //****************************
    //  Interrupt Function
    //****************************
	
    void attachInterrupt(void (*isr)()) __attribute__((always_inline)) {
	isrCallback = isr;
     720:	86 e2       	ldi	r24, 0x26	; 38
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <TimerOne::isrCallback+0x1>
     728:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <TimerOne::isrCallback>
C:\Users\user0\Documents\Arduino\libraries\TimerOne/TimerOne.h:281
	TIMSK1 = _BV(TOIE1);
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
loop():
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:212
    Timer1.attachInterrupt(callback);
  } 
  else {
    delay(5);
  }  
}
     732:	08 95       	ret
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:136
      int v = raw[i];
      if(v == 4) {
        raw[i] = 0;
        tot0++;
      } 
      else if(v == 5) {
     734:	85 30       	cpi	r24, 0x05	; 5
     736:	91 05       	cpc	r25, r1
     738:	19 f4       	brne	.+6      	; 0x740 <loop+0xde>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:137
        raw[i] = raw[i - 1];
     73a:	80 81       	ld	r24, Z
     73c:	81 83       	std	Z+1, r24	; 0x01
     73e:	bb cf       	rjmp	.-138    	; 0x6b6 <loop+0x54>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:140
        totp++;
      } 
      else if(v == 6 || v == 7) {
     740:	06 97       	sbiw	r24, 0x06	; 6
     742:	02 97       	sbiw	r24, 0x02	; 2
     744:	10 f4       	brcc	.+4      	; 0x74a <loop+0xe8>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:141
        raw[i] = 1;
     746:	31 83       	std	Z+1, r19	; 0x01
     748:	b6 cf       	rjmp	.-148    	; 0x6b6 <loop+0x54>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:152
      //else if(v == 8 || v == 9) {
      // raw[i] = 0;
      // tot0++;
      //}
      else {
        raw[i] = 101; // error code
     74a:	21 83       	std	Z+1, r18	; 0x01
     74c:	b4 cf       	rjmp	.-152    	; 0x6b6 <loop+0x54>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:168
        // inside one same bit pattern, keep scanning
        samecnt++;
      } 
      else {
        // got new bit pattern
        if(samecnt >= 15 && lastv == 1) {
     74e:	2f 30       	cpi	r18, 0x0F	; 15
     750:	31 05       	cpc	r19, r1
     752:	1c f0       	brlt	.+6      	; 0x75a <loop+0xf8>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:168 (discriminator 1)
     754:	61 30       	cpi	r22, 0x01	; 1
     756:	71 05       	cpc	r23, r1
     758:	51 f2       	breq	.-108    	; 0x6ee <loop+0x8c>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:174
          // got a start tag prefix, record index and exit
          start = i;
          break;
        }
        // either group of 0s, or fewer than 15 1s, so not a valid tag, keep scanning
        samecnt = 1;
     75a:	21 e0       	ldi	r18, 0x01	; 1
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	bf cf       	rjmp	.-130    	; 0x6de <loop+0x7c>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:184
    // if a valid prefix tag was found, process the buffer
    if(start > 0 && start < (maxBuf - 5*90)) { //adjust to allow room for full dataset past start point
      process_buf(start);
    } 
    else {
      Serial.println(F("no valid data found in buffer"));
     760:	63 e4       	ldi	r22, 0x43	; 67
     762:	71 e0       	ldi	r23, 0x01	; 1
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	94 e0       	ldi	r25, 0x04	; 4
     768:	0e 94 9e 07 	call	0xf3c	; 0xf3c <Print::println(__FlashStringHelper const*)>
     76c:	c8 cf       	rjmp	.-112    	; 0x6fe <loop+0x9c>
E:\2019-11-11_HK_trip\DIY\AVR_Arduino_projects\2022-12-15_ Arduino_FSK_RFID_Reader\Arduino_FSK_RFID_Reader/Arduino_FSK_RFID_Reader.ino:210
    index = 0;
    // reattach the interrupt to get a new chunk of data
    Timer1.attachInterrupt(callback);
  } 
  else {
    delay(5);
     76e:	65 e0       	ldi	r22, 0x05	; 5
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <delay>

0000077a <TimerOne::isrDefaultUnused()>:
_ZN8TimerOne16isrDefaultUnusedEv():
C:\Users\user0\Documents\Arduino\libraries\TimerOne/TimerOne.cpp:59

#endif

void TimerOne::isrDefaultUnused()
{
}
     77a:	08 95       	ret

0000077c <__vector_13>:
__vector_13():
C:\Users\user0\Documents\Arduino\libraries\TimerOne/TimerOne.cpp:34
{
  Timer1.isrCallback();
}
#elif defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
     77c:	1f 92       	push	r1
     77e:	0f 92       	push	r0
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	0f 92       	push	r0
     784:	11 24       	eor	r1, r1
     786:	2f 93       	push	r18
     788:	3f 93       	push	r19
     78a:	4f 93       	push	r20
     78c:	5f 93       	push	r21
     78e:	6f 93       	push	r22
     790:	7f 93       	push	r23
     792:	8f 93       	push	r24
     794:	9f 93       	push	r25
     796:	af 93       	push	r26
     798:	bf 93       	push	r27
     79a:	ef 93       	push	r30
     79c:	ff 93       	push	r31
C:\Users\user0\Documents\Arduino\libraries\TimerOne/TimerOne.cpp:35
  Timer1.isrCallback();
     79e:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <TimerOne::isrCallback>
     7a2:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <TimerOne::isrCallback+0x1>
     7a6:	09 95       	icall
C:\Users\user0\Documents\Arduino\libraries\TimerOne/TimerOne.cpp:36
}
     7a8:	ff 91       	pop	r31
     7aa:	ef 91       	pop	r30
     7ac:	bf 91       	pop	r27
     7ae:	af 91       	pop	r26
     7b0:	9f 91       	pop	r25
     7b2:	8f 91       	pop	r24
     7b4:	7f 91       	pop	r23
     7b6:	6f 91       	pop	r22
     7b8:	5f 91       	pop	r21
     7ba:	4f 91       	pop	r20
     7bc:	3f 91       	pop	r19
     7be:	2f 91       	pop	r18
     7c0:	0f 90       	pop	r0
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	0f 90       	pop	r0
     7c6:	1f 90       	pop	r1
     7c8:	18 95       	reti

000007ca <__vector_16>:
__vector_16():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     7ca:	1f 92       	push	r1
     7cc:	0f 92       	push	r0
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	0f 92       	push	r0
     7d2:	11 24       	eor	r1, r1
     7d4:	2f 93       	push	r18
     7d6:	3f 93       	push	r19
     7d8:	8f 93       	push	r24
     7da:	9f 93       	push	r25
     7dc:	af 93       	push	r26
     7de:	bf 93       	push	r27
     7e0:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <timer0_millis>
     7e4:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <timer0_millis+0x1>
     7e8:	a0 91 00 04 	lds	r26, 0x0400	; 0x800400 <timer0_millis+0x2>
     7ec:	b0 91 01 04 	lds	r27, 0x0401	; 0x800401 <timer0_millis+0x3>
     7f0:	30 91 fd 03 	lds	r19, 0x03FD	; 0x8003fd <timer0_fract>
     7f4:	23 e0       	ldi	r18, 0x03	; 3
     7f6:	23 0f       	add	r18, r19
     7f8:	2d 37       	cpi	r18, 0x7D	; 125
     7fa:	68 f1       	brcs	.+90     	; 0x856 <__vector_16+0x8c>
     7fc:	26 e8       	ldi	r18, 0x86	; 134
     7fe:	23 0f       	add	r18, r19
     800:	02 96       	adiw	r24, 0x02	; 2
     802:	a1 1d       	adc	r26, r1
     804:	b1 1d       	adc	r27, r1
     806:	20 93 fd 03 	sts	0x03FD, r18	; 0x8003fd <timer0_fract>
     80a:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <timer0_millis>
     80e:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <timer0_millis+0x1>
     812:	a0 93 00 04 	sts	0x0400, r26	; 0x800400 <timer0_millis+0x2>
     816:	b0 93 01 04 	sts	0x0401, r27	; 0x800401 <timer0_millis+0x3>
     81a:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <timer0_overflow_count>
     81e:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <timer0_overflow_count+0x1>
     822:	a0 91 fb 03 	lds	r26, 0x03FB	; 0x8003fb <timer0_overflow_count+0x2>
     826:	b0 91 fc 03 	lds	r27, 0x03FC	; 0x8003fc <timer0_overflow_count+0x3>
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	a1 1d       	adc	r26, r1
     82e:	b1 1d       	adc	r27, r1
     830:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <timer0_overflow_count>
     834:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <timer0_overflow_count+0x1>
     838:	a0 93 fb 03 	sts	0x03FB, r26	; 0x8003fb <timer0_overflow_count+0x2>
     83c:	b0 93 fc 03 	sts	0x03FC, r27	; 0x8003fc <timer0_overflow_count+0x3>
     840:	bf 91       	pop	r27
     842:	af 91       	pop	r26
     844:	9f 91       	pop	r25
     846:	8f 91       	pop	r24
     848:	3f 91       	pop	r19
     84a:	2f 91       	pop	r18
     84c:	0f 90       	pop	r0
     84e:	0f be       	out	0x3f, r0	; 63
     850:	0f 90       	pop	r0
     852:	1f 90       	pop	r1
     854:	18 95       	reti
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	a1 1d       	adc	r26, r1
     85a:	b1 1d       	adc	r27, r1
     85c:	d4 cf       	rjmp	.-88     	; 0x806 <__vector_16+0x3c>

0000085e <micros>:
micros():
     85e:	3f b7       	in	r19, 0x3f	; 63
     860:	f8 94       	cli
     862:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <timer0_overflow_count>
     866:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <timer0_overflow_count+0x1>
     86a:	a0 91 fb 03 	lds	r26, 0x03FB	; 0x8003fb <timer0_overflow_count+0x2>
     86e:	b0 91 fc 03 	lds	r27, 0x03FC	; 0x8003fc <timer0_overflow_count+0x3>
     872:	26 b5       	in	r18, 0x26	; 38
     874:	a8 9b       	sbis	0x15, 0	; 21
     876:	05 c0       	rjmp	.+10     	; 0x882 <micros+0x24>
     878:	2f 3f       	cpi	r18, 0xFF	; 255
     87a:	19 f0       	breq	.+6      	; 0x882 <micros+0x24>
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	a1 1d       	adc	r26, r1
     880:	b1 1d       	adc	r27, r1
     882:	3f bf       	out	0x3f, r19	; 63
     884:	ba 2f       	mov	r27, r26
     886:	a9 2f       	mov	r26, r25
     888:	98 2f       	mov	r25, r24
     88a:	88 27       	eor	r24, r24
     88c:	bc 01       	movw	r22, r24
     88e:	cd 01       	movw	r24, r26
     890:	62 0f       	add	r22, r18
     892:	71 1d       	adc	r23, r1
     894:	81 1d       	adc	r24, r1
     896:	91 1d       	adc	r25, r1
     898:	42 e0       	ldi	r20, 0x02	; 2
     89a:	66 0f       	add	r22, r22
     89c:	77 1f       	adc	r23, r23
     89e:	88 1f       	adc	r24, r24
     8a0:	99 1f       	adc	r25, r25
     8a2:	4a 95       	dec	r20
     8a4:	d1 f7       	brne	.-12     	; 0x89a <micros+0x3c>
     8a6:	08 95       	ret

000008a8 <delay>:
delay():
     8a8:	8f 92       	push	r8
     8aa:	9f 92       	push	r9
     8ac:	af 92       	push	r10
     8ae:	bf 92       	push	r11
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	6b 01       	movw	r12, r22
     8ba:	7c 01       	movw	r14, r24
     8bc:	0e 94 2f 04 	call	0x85e	; 0x85e <micros>
     8c0:	4b 01       	movw	r8, r22
     8c2:	5c 01       	movw	r10, r24
     8c4:	c1 14       	cp	r12, r1
     8c6:	d1 04       	cpc	r13, r1
     8c8:	e1 04       	cpc	r14, r1
     8ca:	f1 04       	cpc	r15, r1
     8cc:	e9 f0       	breq	.+58     	; 0x908 <delay+0x60>
     8ce:	0e 94 8c 08 	call	0x1118	; 0x1118 <yield>
     8d2:	0e 94 2f 04 	call	0x85e	; 0x85e <micros>
     8d6:	68 19       	sub	r22, r8
     8d8:	79 09       	sbc	r23, r9
     8da:	8a 09       	sbc	r24, r10
     8dc:	9b 09       	sbc	r25, r11
     8de:	68 3e       	cpi	r22, 0xE8	; 232
     8e0:	73 40       	sbci	r23, 0x03	; 3
     8e2:	81 05       	cpc	r24, r1
     8e4:	91 05       	cpc	r25, r1
     8e6:	70 f3       	brcs	.-36     	; 0x8c4 <delay+0x1c>
     8e8:	21 e0       	ldi	r18, 0x01	; 1
     8ea:	c2 1a       	sub	r12, r18
     8ec:	d1 08       	sbc	r13, r1
     8ee:	e1 08       	sbc	r14, r1
     8f0:	f1 08       	sbc	r15, r1
     8f2:	88 ee       	ldi	r24, 0xE8	; 232
     8f4:	88 0e       	add	r8, r24
     8f6:	83 e0       	ldi	r24, 0x03	; 3
     8f8:	98 1e       	adc	r9, r24
     8fa:	a1 1c       	adc	r10, r1
     8fc:	b1 1c       	adc	r11, r1
     8fe:	c1 14       	cp	r12, r1
     900:	d1 04       	cpc	r13, r1
     902:	e1 04       	cpc	r14, r1
     904:	f1 04       	cpc	r15, r1
     906:	29 f7       	brne	.-54     	; 0x8d2 <delay+0x2a>
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	df 90       	pop	r13
     90e:	cf 90       	pop	r12
     910:	bf 90       	pop	r11
     912:	af 90       	pop	r10
     914:	9f 90       	pop	r9
     916:	8f 90       	pop	r8
     918:	08 95       	ret

0000091a <init>:
init():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     91a:	78 94       	sei
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
     91c:	84 b5       	in	r24, 0x24	; 36
     91e:	83 60       	ori	r24, 0x03	; 3
     920:	84 bd       	out	0x24, r24	; 36
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
     922:	85 b5       	in	r24, 0x25	; 37
     924:	83 60       	ori	r24, 0x03	; 3
     926:	85 bd       	out	0x25, r24	; 37
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
     928:	ee e6       	ldi	r30, 0x6E	; 110
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	81 60       	ori	r24, 0x01	; 1
     930:	80 83       	st	Z, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     932:	e1 e8       	ldi	r30, 0x81	; 129
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	80 83       	st	Z, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     93a:	80 81       	ld	r24, Z
     93c:	81 60       	ori	r24, 0x01	; 1
     93e:	80 83       	st	Z, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     940:	e0 e8       	ldi	r30, 0x80	; 128
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 81       	ld	r24, Z
     946:	81 60       	ori	r24, 0x01	; 1
     948:	80 83       	st	Z, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
     94a:	e1 eb       	ldi	r30, 0xB1	; 177
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 81       	ld	r24, Z
     950:	84 60       	ori	r24, 0x04	; 4
     952:	80 83       	st	Z, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
     954:	e0 eb       	ldi	r30, 0xB0	; 176
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	81 60       	ori	r24, 0x01	; 1
     95c:	80 83       	st	Z, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
     95e:	87 e8       	ldi	r24, 0x87	; 135
     960:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
     964:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
     968:	08 95       	ret

0000096a <turnOffPWM>:
turnOffPWM():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     96a:	84 30       	cpi	r24, 0x04	; 4
     96c:	81 f0       	breq	.+32     	; 0x98e <turnOffPWM+0x24>
     96e:	28 f4       	brcc	.+10     	; 0x97a <turnOffPWM+0x10>
     970:	82 30       	cpi	r24, 0x02	; 2
     972:	e9 f0       	breq	.+58     	; 0x9ae <turnOffPWM+0x44>
     974:	83 30       	cpi	r24, 0x03	; 3
     976:	f9 f0       	breq	.+62     	; 0x9b6 <turnOffPWM+0x4c>
     978:	08 95       	ret
     97a:	88 30       	cpi	r24, 0x08	; 8
     97c:	71 f0       	breq	.+28     	; 0x99a <turnOffPWM+0x30>
     97e:	89 30       	cpi	r24, 0x09	; 9
     980:	91 f0       	breq	.+36     	; 0x9a6 <turnOffPWM+0x3c>
     982:	85 30       	cpi	r24, 0x05	; 5
     984:	b9 f4       	brne	.+46     	; 0x9b4 <turnOffPWM+0x4a>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     986:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     98a:	8f 7d       	andi	r24, 0xDF	; 223
     98c:	03 c0       	rjmp	.+6      	; 0x994 <turnOffPWM+0x2a>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     98e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     992:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     994:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
     998:	08 95       	ret
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     99a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     99e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     9a0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
     9a4:	08 95       	ret
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     9a6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     9aa:	8f 7d       	andi	r24, 0xDF	; 223
     9ac:	f9 cf       	rjmp	.-14     	; 0x9a0 <turnOffPWM+0x36>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     9ae:	84 b5       	in	r24, 0x24	; 36
     9b0:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     9b2:	84 bd       	out	0x24, r24	; 36
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     9b4:	08 95       	ret
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     9b6:	84 b5       	in	r24, 0x24	; 36
     9b8:	8f 7d       	andi	r24, 0xDF	; 223
     9ba:	fb cf       	rjmp	.-10     	; 0x9b2 <turnOffPWM+0x48>

000009bc <pinMode>:
pinMode():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	fc 01       	movw	r30, r24
     9c4:	e6 55       	subi	r30, 0x56	; 86
     9c6:	fe 4f       	sbci	r31, 0xFE	; 254
     9c8:	24 91       	lpm	r18, Z
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     9ca:	8f 53       	subi	r24, 0x3F	; 63
     9cc:	9e 4f       	sbci	r25, 0xFE	; 254
     9ce:	fc 01       	movw	r30, r24
     9d0:	84 91       	lpm	r24, Z
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     9d2:	88 23       	and	r24, r24
     9d4:	c9 f0       	breq	.+50     	; 0xa08 <pinMode+0x4c>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	fc 01       	movw	r30, r24
     9de:	e4 51       	subi	r30, 0x14	; 20
     9e0:	fe 4f       	sbci	r31, 0xFE	; 254
     9e2:	a5 91       	lpm	r26, Z+
     9e4:	b4 91       	lpm	r27, Z
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     9e6:	fc 01       	movw	r30, r24
     9e8:	ee 51       	subi	r30, 0x1E	; 30
     9ea:	fe 4f       	sbci	r31, 0xFE	; 254
     9ec:	c5 91       	lpm	r28, Z+
     9ee:	d4 91       	lpm	r29, Z
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     9f0:	61 11       	cpse	r22, r1
     9f2:	0d c0       	rjmp	.+26     	; 0xa0e <pinMode+0x52>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     9f4:	9f b7       	in	r25, 0x3f	; 63
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     9f6:	f8 94       	cli
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     9f8:	8c 91       	ld	r24, X
     9fa:	20 95       	com	r18
     9fc:	82 23       	and	r24, r18
     9fe:	8c 93       	st	X, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     a00:	88 81       	ld	r24, Y
     a02:	28 23       	and	r18, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     a04:	28 83       	st	Y, r18
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     a06:	9f bf       	out	0x3f, r25	; 63
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     a0e:	62 30       	cpi	r22, 0x02	; 2
     a10:	51 f4       	brne	.+20     	; 0xa26 <pinMode+0x6a>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     a12:	9f b7       	in	r25, 0x3f	; 63
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     a14:	f8 94       	cli
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     a16:	3c 91       	ld	r19, X
     a18:	82 2f       	mov	r24, r18
     a1a:	80 95       	com	r24
     a1c:	83 23       	and	r24, r19
     a1e:	8c 93       	st	X, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     a20:	e8 81       	ld	r30, Y
     a22:	2e 2b       	or	r18, r30
     a24:	ef cf       	rjmp	.-34     	; 0xa04 <pinMode+0x48>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     a26:	8f b7       	in	r24, 0x3f	; 63
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     a28:	f8 94       	cli
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     a2a:	ec 91       	ld	r30, X
     a2c:	2e 2b       	or	r18, r30
     a2e:	2c 93       	st	X, r18
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     a30:	8f bf       	out	0x3f, r24	; 63
     a32:	ea cf       	rjmp	.-44     	; 0xa08 <pinMode+0x4c>

00000a34 <digitalWrite>:
digitalWrite():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     a3a:	28 2f       	mov	r18, r24
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	f9 01       	movw	r30, r18
     a40:	ed 56       	subi	r30, 0x6D	; 109
     a42:	fe 4f       	sbci	r31, 0xFE	; 254
     a44:	84 91       	lpm	r24, Z
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     a46:	f9 01       	movw	r30, r18
     a48:	e6 55       	subi	r30, 0x56	; 86
     a4a:	fe 4f       	sbci	r31, 0xFE	; 254
     a4c:	d4 91       	lpm	r29, Z
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     a4e:	f9 01       	movw	r30, r18
     a50:	ef 53       	subi	r30, 0x3F	; 63
     a52:	fe 4f       	sbci	r31, 0xFE	; 254
     a54:	c4 91       	lpm	r28, Z
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     a56:	cc 23       	and	r28, r28
     a58:	a9 f0       	breq	.+42     	; 0xa84 <digitalWrite+0x50>
     a5a:	16 2f       	mov	r17, r22
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     a5c:	81 11       	cpse	r24, r1
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
     a5e:	0e 94 b5 04 	call	0x96a	; 0x96a <turnOffPWM>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     a62:	ec 2f       	mov	r30, r28
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	ee 0f       	add	r30, r30
     a68:	ff 1f       	adc	r31, r31
     a6a:	ee 51       	subi	r30, 0x1E	; 30
     a6c:	fe 4f       	sbci	r31, 0xFE	; 254
     a6e:	a5 91       	lpm	r26, Z+
     a70:	b4 91       	lpm	r27, Z
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     a72:	8f b7       	in	r24, 0x3f	; 63
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     a74:	f8 94       	cli
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     a76:	ec 91       	ld	r30, X
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     a78:	11 11       	cpse	r17, r1
     a7a:	08 c0       	rjmp	.+16     	; 0xa8c <digitalWrite+0x58>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     a7c:	d0 95       	com	r29
     a7e:	de 23       	and	r29, r30
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     a80:	dc 93       	st	X, r29
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     a82:	8f bf       	out	0x3f, r24	; 63
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	08 95       	ret
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     a8c:	de 2b       	or	r29, r30
     a8e:	f8 cf       	rjmp	.-16     	; 0xa80 <digitalWrite+0x4c>

00000a90 <digitalRead>:
digitalRead():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     a94:	28 2f       	mov	r18, r24
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	f9 01       	movw	r30, r18
     a9a:	ed 56       	subi	r30, 0x6D	; 109
     a9c:	fe 4f       	sbci	r31, 0xFE	; 254
     a9e:	84 91       	lpm	r24, Z
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     aa0:	f9 01       	movw	r30, r18
     aa2:	e6 55       	subi	r30, 0x56	; 86
     aa4:	fe 4f       	sbci	r31, 0xFE	; 254
     aa6:	d4 91       	lpm	r29, Z
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     aa8:	f9 01       	movw	r30, r18
     aaa:	ef 53       	subi	r30, 0x3F	; 63
     aac:	fe 4f       	sbci	r31, 0xFE	; 254
     aae:	c4 91       	lpm	r28, Z
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     ab0:	cc 23       	and	r28, r28
     ab2:	a1 f0       	breq	.+40     	; 0xadc <digitalRead+0x4c>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     ab4:	81 11       	cpse	r24, r1
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
     ab6:	0e 94 b5 04 	call	0x96a	; 0x96a <turnOffPWM>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     aba:	ec 2f       	mov	r30, r28
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	ee 0f       	add	r30, r30
     ac0:	ff 1f       	adc	r31, r31
     ac2:	e8 52       	subi	r30, 0x28	; 40
     ac4:	fe 4f       	sbci	r31, 0xFE	; 254
     ac6:	a5 91       	lpm	r26, Z+
     ac8:	b4 91       	lpm	r27, Z
     aca:	ec 91       	ld	r30, X
     acc:	ed 23       	and	r30, r29
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	09 f4       	brne	.+2      	; 0xad6 <digitalRead+0x46>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	08 95       	ret
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	fa cf       	rjmp	.-12     	; 0xad6 <digitalRead+0x46>

00000ae2 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     ae2:	fc 01       	movw	r30, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     ae4:	91 8d       	ldd	r25, Z+25	; 0x19
     ae6:	22 8d       	ldd	r18, Z+26	; 0x1a
     ae8:	89 2f       	mov	r24, r25
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	80 5c       	subi	r24, 0xC0	; 192
     aee:	9f 4f       	sbci	r25, 0xFF	; 255
     af0:	82 1b       	sub	r24, r18
     af2:	91 09       	sbc	r25, r1
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
     af4:	8f 73       	andi	r24, 0x3F	; 63
     af6:	99 27       	eor	r25, r25
     af8:	08 95       	ret

00000afa <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
     afa:	fc 01       	movw	r30, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
     afc:	91 8d       	ldd	r25, Z+25	; 0x19
     afe:	82 8d       	ldd	r24, Z+26	; 0x1a
     b00:	98 17       	cp	r25, r24
     b02:	31 f0       	breq	.+12     	; 0xb10 <HardwareSerial::peek()+0x16>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     b04:	82 8d       	ldd	r24, Z+26	; 0x1a
     b06:	e8 0f       	add	r30, r24
     b08:	f1 1d       	adc	r31, r1
     b0a:	85 8d       	ldd	r24, Z+29	; 0x1d
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	08 95       	ret
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     b10:	8f ef       	ldi	r24, 0xFF	; 255
     b12:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     b14:	08 95       	ret

00000b16 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
     b16:	fc 01       	movw	r30, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     b18:	91 8d       	ldd	r25, Z+25	; 0x19
     b1a:	82 8d       	ldd	r24, Z+26	; 0x1a
     b1c:	98 17       	cp	r25, r24
     b1e:	61 f0       	breq	.+24     	; 0xb38 <HardwareSerial::read()+0x22>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     b20:	a2 8d       	ldd	r26, Z+26	; 0x1a
     b22:	ae 0f       	add	r26, r30
     b24:	bf 2f       	mov	r27, r31
     b26:	b1 1d       	adc	r27, r1
     b28:	5d 96       	adiw	r26, 0x1d	; 29
     b2a:	8c 91       	ld	r24, X
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     b2c:	92 8d       	ldd	r25, Z+26	; 0x1a
     b2e:	9f 5f       	subi	r25, 0xFF	; 255
     b30:	9f 73       	andi	r25, 0x3F	; 63
     b32:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	08 95       	ret
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     b38:	8f ef       	ldi	r24, 0xFF	; 255
     b3a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     b3c:	08 95       	ret

00000b3e <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     b3e:	fc 01       	movw	r30, r24
     b40:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
     b42:	44 8d       	ldd	r20, Z+28	; 0x1c
     b44:	25 2f       	mov	r18, r21
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	84 2f       	mov	r24, r20
     b4a:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     b4c:	82 1b       	sub	r24, r18
     b4e:	93 0b       	sbc	r25, r19
     b50:	54 17       	cp	r21, r20
     b52:	10 f0       	brcs	.+4      	; 0xb58 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
     b54:	cf 96       	adiw	r24, 0x3f	; 63
     b56:	08 95       	ret
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
     b58:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
     b5a:	08 95       	ret

00000b5c <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     b5c:	84 ef       	ldi	r24, 0xF4	; 244
     b5e:	96 e0       	ldi	r25, 0x06	; 6
     b60:	89 2b       	or	r24, r25
     b62:	49 f0       	breq	.+18     	; 0xb76 <serialEventRun()+0x1a>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	89 2b       	or	r24, r25
     b6a:	29 f0       	breq	.+10     	; 0xb76 <serialEventRun()+0x1a>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
     b6c:	0e 94 f4 06 	call	0xde8	; 0xde8 <Serial0_available()>
     b70:	81 11       	cpse	r24, r1
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
     b72:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     b76:	08 95       	ret

00000b78 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     b78:	fc 01       	movw	r30, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     b7a:	a4 8d       	ldd	r26, Z+28	; 0x1c
     b7c:	a8 0f       	add	r26, r24
     b7e:	b9 2f       	mov	r27, r25
     b80:	b1 1d       	adc	r27, r1
     b82:	a3 5a       	subi	r26, 0xA3	; 163
     b84:	bf 4f       	sbci	r27, 0xFF	; 255
     b86:	2c 91       	ld	r18, X
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     b88:	84 8d       	ldd	r24, Z+28	; 0x1c
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	8f 73       	andi	r24, 0x3F	; 63
     b90:	99 27       	eor	r25, r25
     b92:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
     b94:	a6 89       	ldd	r26, Z+22	; 0x16
     b96:	b7 89       	ldd	r27, Z+23	; 0x17
     b98:	2c 93       	st	X, r18
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
     b9a:	a0 89       	ldd	r26, Z+16	; 0x10
     b9c:	b1 89       	ldd	r27, Z+17	; 0x11
     b9e:	8c 91       	ld	r24, X
     ba0:	80 64       	ori	r24, 0x40	; 64
     ba2:	8c 93       	st	X, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
     ba4:	93 8d       	ldd	r25, Z+27	; 0x1b
     ba6:	84 8d       	ldd	r24, Z+28	; 0x1c
     ba8:	98 13       	cpse	r25, r24
     baa:	06 c0       	rjmp	.+12     	; 0xbb8 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     bac:	02 88       	ldd	r0, Z+18	; 0x12
     bae:	f3 89       	ldd	r31, Z+19	; 0x13
     bb0:	e0 2d       	mov	r30, r0
     bb2:	80 81       	ld	r24, Z
     bb4:	8f 7d       	andi	r24, 0xDF	; 223
     bb6:	80 83       	st	Z, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
     bb8:	08 95       	ret

00000bba <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	ec 01       	movw	r28, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     bc0:	88 8d       	ldd	r24, Y+24	; 0x18
     bc2:	88 23       	and	r24, r24
     bc4:	b9 f0       	breq	.+46     	; 0xbf4 <HardwareSerial::flush()+0x3a>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     bc6:	aa 89       	ldd	r26, Y+18	; 0x12
     bc8:	bb 89       	ldd	r27, Y+19	; 0x13
     bca:	e8 89       	ldd	r30, Y+16	; 0x10
     bcc:	f9 89       	ldd	r31, Y+17	; 0x11
     bce:	8c 91       	ld	r24, X
     bd0:	85 fd       	sbrc	r24, 5
     bd2:	03 c0       	rjmp	.+6      	; 0xbda <HardwareSerial::flush()+0x20>
     bd4:	80 81       	ld	r24, Z
     bd6:	86 fd       	sbrc	r24, 6
     bd8:	0d c0       	rjmp	.+26     	; 0xbf4 <HardwareSerial::flush()+0x3a>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	07 fc       	sbrc	r0, 7
     bde:	f7 cf       	rjmp	.-18     	; 0xbce <HardwareSerial::flush()+0x14>
     be0:	8c 91       	ld	r24, X
     be2:	85 ff       	sbrs	r24, 5
     be4:	f2 cf       	rjmp	.-28     	; 0xbca <HardwareSerial::flush()+0x10>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     be6:	80 81       	ld	r24, Z
     be8:	85 ff       	sbrs	r24, 5
     bea:	ed cf       	rjmp	.-38     	; 0xbc6 <HardwareSerial::flush()+0xc>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
     bec:	ce 01       	movw	r24, r28
     bee:	0e 94 bc 05 	call	0xb78	; 0xb78 <HardwareSerial::_tx_udr_empty_irq()>
     bf2:	e9 cf       	rjmp	.-46     	; 0xbc6 <HardwareSerial::flush()+0xc>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	ec 01       	movw	r28, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     c0c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c0e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c10:	98 13       	cpse	r25, r24
     c12:	16 c0       	rjmp	.+44     	; 0xc40 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
     c14:	e8 89       	ldd	r30, Y+16	; 0x10
     c16:	f9 89       	ldd	r31, Y+17	; 0x11
     c18:	80 81       	ld	r24, Z
     c1a:	85 ff       	sbrs	r24, 5
     c1c:	11 c0       	rjmp	.+34     	; 0xc40 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
     c1e:	ee 89       	ldd	r30, Y+22	; 0x16
     c20:	ff 89       	ldd	r31, Y+23	; 0x17
     c22:	60 83       	st	Z, r22
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
     c24:	e8 89       	ldd	r30, Y+16	; 0x10
     c26:	f9 89       	ldd	r31, Y+17	; 0x11
     c28:	80 81       	ld	r24, Z
     c2a:	80 64       	ori	r24, 0x40	; 64
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
     c2c:	80 83       	st	Z, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	08 95       	ret
     c40:	f6 2e       	mov	r15, r22
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     c42:	0b 8d       	ldd	r16, Y+27	; 0x1b
     c44:	10 e0       	ldi	r17, 0x00	; 0
     c46:	0f 5f       	subi	r16, 0xFF	; 255
     c48:	1f 4f       	sbci	r17, 0xFF	; 255
     c4a:	0f 73       	andi	r16, 0x3F	; 63
     c4c:	11 27       	eor	r17, r17
     c4e:	e0 2e       	mov	r14, r16
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     c50:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c52:	8e 11       	cpse	r24, r14
     c54:	0c c0       	rjmp	.+24     	; 0xc6e <HardwareSerial::write(unsigned char)+0x74>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	07 fc       	sbrc	r0, 7
     c5a:	fa cf       	rjmp	.-12     	; 0xc50 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     c5c:	e8 89       	ldd	r30, Y+16	; 0x10
     c5e:	f9 89       	ldd	r31, Y+17	; 0x11
     c60:	80 81       	ld	r24, Z
     c62:	85 ff       	sbrs	r24, 5
     c64:	f5 cf       	rjmp	.-22     	; 0xc50 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
     c66:	ce 01       	movw	r24, r28
     c68:	0e 94 bc 05 	call	0xb78	; 0xb78 <HardwareSerial::_tx_udr_empty_irq()>
     c6c:	f1 cf       	rjmp	.-30     	; 0xc50 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     c6e:	eb 8d       	ldd	r30, Y+27	; 0x1b
     c70:	ec 0f       	add	r30, r28
     c72:	fd 2f       	mov	r31, r29
     c74:	f1 1d       	adc	r31, r1
     c76:	e3 5a       	subi	r30, 0xA3	; 163
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	f0 82       	st	Z, r15
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
     c7c:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
     c7e:	ea 89       	ldd	r30, Y+18	; 0x12
     c80:	fb 89       	ldd	r31, Y+19	; 0x13
     c82:	80 81       	ld	r24, Z
     c84:	80 62       	ori	r24, 0x20	; 32
     c86:	d2 cf       	rjmp	.-92     	; 0xc2c <HardwareSerial::write(unsigned char)+0x32>

00000c88 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     c88:	cf 92       	push	r12
     c8a:	df 92       	push	r13
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	1f 93       	push	r17
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	ec 01       	movw	r28, r24
     c98:	6a 01       	movw	r12, r20
     c9a:	7b 01       	movw	r14, r22
     c9c:	12 2f       	mov	r17, r18
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     c9e:	e8 89       	ldd	r30, Y+16	; 0x10
     ca0:	f9 89       	ldd	r31, Y+17	; 0x11
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	80 83       	st	Z, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ca6:	c1 14       	cp	r12, r1
     ca8:	81 ee       	ldi	r24, 0xE1	; 225
     caa:	d8 06       	cpc	r13, r24
     cac:	e1 04       	cpc	r14, r1
     cae:	f1 04       	cpc	r15, r1
     cb0:	a1 f0       	breq	.+40     	; 0xcda <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	79 e0       	ldi	r23, 0x09	; 9
     cb6:	8d e3       	ldi	r24, 0x3D	; 61
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a7 01       	movw	r20, r14
     cbc:	96 01       	movw	r18, r12
     cbe:	0e 94 8d 08 	call	0x111a	; 0x111a <__udivmodsi4>
     cc2:	21 50       	subi	r18, 0x01	; 1
     cc4:	31 09       	sbc	r19, r1
     cc6:	41 09       	sbc	r20, r1
     cc8:	51 09       	sbc	r21, r1
     cca:	56 95       	lsr	r21
     ccc:	47 95       	ror	r20
     cce:	37 95       	ror	r19
     cd0:	27 95       	ror	r18
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     cd2:	21 15       	cp	r18, r1
     cd4:	80 e1       	ldi	r24, 0x10	; 16
     cd6:	38 07       	cpc	r19, r24
     cd8:	98 f0       	brcs	.+38     	; 0xd00 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
     cda:	e8 89       	ldd	r30, Y+16	; 0x10
     cdc:	f9 89       	ldd	r31, Y+17	; 0x11
     cde:	10 82       	st	Z, r1
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     ce0:	60 e8       	ldi	r22, 0x80	; 128
     ce2:	74 e8       	ldi	r23, 0x84	; 132
     ce4:	8e e1       	ldi	r24, 0x1E	; 30
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	a7 01       	movw	r20, r14
     cea:	96 01       	movw	r18, r12
     cec:	0e 94 8d 08 	call	0x111a	; 0x111a <__udivmodsi4>
     cf0:	21 50       	subi	r18, 0x01	; 1
     cf2:	31 09       	sbc	r19, r1
     cf4:	41 09       	sbc	r20, r1
     cf6:	51 09       	sbc	r21, r1
     cf8:	56 95       	lsr	r21
     cfa:	47 95       	ror	r20
     cfc:	37 95       	ror	r19
     cfe:	27 95       	ror	r18
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     d00:	ec 85       	ldd	r30, Y+12	; 0x0c
     d02:	fd 85       	ldd	r31, Y+13	; 0x0d
     d04:	30 83       	st	Z, r19
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
     d06:	ee 85       	ldd	r30, Y+14	; 0x0e
     d08:	ff 85       	ldd	r31, Y+15	; 0x0f
     d0a:	20 83       	st	Z, r18
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
     d0c:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     d0e:	ec 89       	ldd	r30, Y+20	; 0x14
     d10:	fd 89       	ldd	r31, Y+21	; 0x15
     d12:	10 83       	st	Z, r17
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
     d14:	ea 89       	ldd	r30, Y+18	; 0x12
     d16:	fb 89       	ldd	r31, Y+19	; 0x13
     d18:	80 81       	ld	r24, Z
     d1a:	88 69       	ori	r24, 0x98	; 152
     d1c:	80 83       	st	Z, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
     d1e:	ea 89       	ldd	r30, Y+18	; 0x12
     d20:	fb 89       	ldd	r31, Y+19	; 0x13
     d22:	80 81       	ld	r24, Z
     d24:	8f 7d       	andi	r24, 0xDF	; 223
     d26:	80 83       	st	Z, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	df 90       	pop	r13
     d34:	cf 90       	pop	r12
     d36:	08 95       	ret

00000d38 <__vector_18>:
__vector_18():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     d38:	1f 92       	push	r1
     d3a:	0f 92       	push	r0
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	0f 92       	push	r0
     d40:	11 24       	eor	r1, r1
     d42:	2f 93       	push	r18
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	ef 93       	push	r30
     d4a:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     d4c:	e0 91 12 04 	lds	r30, 0x0412	; 0x800412 <Serial+0x10>
     d50:	f0 91 13 04 	lds	r31, 0x0413	; 0x800413 <Serial+0x11>
     d54:	80 81       	ld	r24, Z
     d56:	e0 91 18 04 	lds	r30, 0x0418	; 0x800418 <Serial+0x16>
     d5a:	f0 91 19 04 	lds	r31, 0x0419	; 0x800419 <Serial+0x17>
     d5e:	82 fd       	sbrc	r24, 2
     d60:	1b c0       	rjmp	.+54     	; 0xd98 <__vector_18+0x60>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     d62:	90 81       	ld	r25, Z
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     d64:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <Serial+0x19>
     d68:	8f 5f       	subi	r24, 0xFF	; 255
     d6a:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     d6c:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <Serial+0x1a>
     d70:	82 17       	cp	r24, r18
     d72:	41 f0       	breq	.+16     	; 0xd84 <__vector_18+0x4c>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
     d74:	e0 91 1b 04 	lds	r30, 0x041B	; 0x80041b <Serial+0x19>
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	ee 5f       	subi	r30, 0xFE	; 254
     d7c:	fb 4f       	sbci	r31, 0xFB	; 251
     d7e:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
     d80:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <Serial+0x19>
__vector_18():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     d84:	ff 91       	pop	r31
     d86:	ef 91       	pop	r30
     d88:	9f 91       	pop	r25
     d8a:	8f 91       	pop	r24
     d8c:	2f 91       	pop	r18
     d8e:	0f 90       	pop	r0
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	0f 90       	pop	r0
     d94:	1f 90       	pop	r1
     d96:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     d98:	80 81       	ld	r24, Z
__vector_18():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
     d9a:	f4 cf       	rjmp	.-24     	; 0xd84 <__vector_18+0x4c>

00000d9c <__vector_19>:
__vector_19():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     d9c:	1f 92       	push	r1
     d9e:	0f 92       	push	r0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	0f 92       	push	r0
     da4:	11 24       	eor	r1, r1
     da6:	2f 93       	push	r18
     da8:	3f 93       	push	r19
     daa:	4f 93       	push	r20
     dac:	5f 93       	push	r21
     dae:	6f 93       	push	r22
     db0:	7f 93       	push	r23
     db2:	8f 93       	push	r24
     db4:	9f 93       	push	r25
     db6:	af 93       	push	r26
     db8:	bf 93       	push	r27
     dba:	ef 93       	push	r30
     dbc:	ff 93       	push	r31
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	94 e0       	ldi	r25, 0x04	; 4
     dc2:	0e 94 bc 05 	call	0xb78	; 0xb78 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
     dc6:	ff 91       	pop	r31
     dc8:	ef 91       	pop	r30
     dca:	bf 91       	pop	r27
     dcc:	af 91       	pop	r26
     dce:	9f 91       	pop	r25
     dd0:	8f 91       	pop	r24
     dd2:	7f 91       	pop	r23
     dd4:	6f 91       	pop	r22
     dd6:	5f 91       	pop	r21
     dd8:	4f 91       	pop	r20
     dda:	3f 91       	pop	r19
     ddc:	2f 91       	pop	r18
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	94 e0       	ldi	r25, 0x04	; 4
     dec:	0e 94 71 05 	call	0xae2	; 0xae2 <HardwareSerial::available()>
     df0:	21 e0       	ldi	r18, 0x01	; 1
     df2:	89 2b       	or	r24, r25
     df4:	09 f4       	brne	.+2      	; 0xdf8 <Serial0_available()+0x10>
     df6:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     df8:	82 2f       	mov	r24, r18
     dfa:	08 95       	ret

00000dfc <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     dfc:	e2 e0       	ldi	r30, 0x02	; 2
     dfe:	f4 e0       	ldi	r31, 0x04	; 4
     e00:	13 82       	std	Z+3, r1	; 0x03
     e02:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     e04:	88 ee       	ldi	r24, 0xE8	; 232
     e06:	93 e0       	ldi	r25, 0x03	; 3
     e08:	a0 e0       	ldi	r26, 0x00	; 0
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	84 83       	std	Z+4, r24	; 0x04
     e0e:	95 83       	std	Z+5, r25	; 0x05
     e10:	a6 83       	std	Z+6, r26	; 0x06
     e12:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     e14:	8f e1       	ldi	r24, 0x1F	; 31
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	91 83       	std	Z+1, r25	; 0x01
     e1a:	80 83       	st	Z, r24
     e1c:	85 ec       	ldi	r24, 0xC5	; 197
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	95 87       	std	Z+13, r25	; 0x0d
     e22:	84 87       	std	Z+12, r24	; 0x0c
     e24:	84 ec       	ldi	r24, 0xC4	; 196
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	97 87       	std	Z+15, r25	; 0x0f
     e2a:	86 87       	std	Z+14, r24	; 0x0e
     e2c:	80 ec       	ldi	r24, 0xC0	; 192
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	91 8b       	std	Z+17, r25	; 0x11
     e32:	80 8b       	std	Z+16, r24	; 0x10
     e34:	81 ec       	ldi	r24, 0xC1	; 193
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	93 8b       	std	Z+19, r25	; 0x13
     e3a:	82 8b       	std	Z+18, r24	; 0x12
     e3c:	82 ec       	ldi	r24, 0xC2	; 194
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	95 8b       	std	Z+21, r25	; 0x15
     e42:	84 8b       	std	Z+20, r24	; 0x14
     e44:	86 ec       	ldi	r24, 0xC6	; 198
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	97 8b       	std	Z+23, r25	; 0x17
     e4a:	86 8b       	std	Z+22, r24	; 0x16
     e4c:	11 8e       	std	Z+25, r1	; 0x19
     e4e:	12 8e       	std	Z+26, r1	; 0x1a
     e50:	13 8e       	std	Z+27, r1	; 0x1b
     e52:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
     e54:	08 95       	ret

00000e56 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:171
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     e56:	af 92       	push	r10
     e58:	bf 92       	push	r11
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	6c 01       	movw	r12, r24
     e6c:	7b 01       	movw	r14, r22
     e6e:	8b 01       	movw	r16, r22
     e70:	04 0f       	add	r16, r20
     e72:	15 1f       	adc	r17, r21
     e74:	eb 01       	movw	r28, r22
     e76:	5e 01       	movw	r10, r28
     e78:	ae 18       	sub	r10, r14
     e7a:	bf 08       	sbc	r11, r15
     e7c:	c0 17       	cp	r28, r16
     e7e:	d1 07       	cpc	r29, r17
     e80:	59 f0       	breq	.+22     	; 0xe98 <Print::write(unsigned char const*, unsigned int)+0x42>
     e82:	69 91       	ld	r22, Y+
     e84:	d6 01       	movw	r26, r12
     e86:	ed 91       	ld	r30, X+
     e88:	fc 91       	ld	r31, X
     e8a:	01 90       	ld	r0, Z+
     e8c:	f0 81       	ld	r31, Z
     e8e:	e0 2d       	mov	r30, r0
     e90:	c6 01       	movw	r24, r12
     e92:	09 95       	icall
     e94:	89 2b       	or	r24, r25
     e96:	79 f7       	brne	.-34     	; 0xe76 <Print::write(unsigned char const*, unsigned int)+0x20>
     e98:	c5 01       	movw	r24, r10
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	ff 90       	pop	r15
     ea4:	ef 90       	pop	r14
     ea6:	df 90       	pop	r13
     ea8:	cf 90       	pop	r12
     eaa:	bf 90       	pop	r11
     eac:	af 90       	pop	r10
     eae:	08 95       	ret

00000eb0 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
     eb0:	fb 01       	movw	r30, r22
     eb2:	01 90       	ld	r0, Z+
     eb4:	00 20       	and	r0, r0
     eb6:	e9 f7       	brne	.-6      	; 0xeb2 <Print::write(char const*) [clone .part.2]+0x2>
     eb8:	31 97       	sbiw	r30, 0x01	; 1
     eba:	af 01       	movw	r20, r30
     ebc:	46 1b       	sub	r20, r22
     ebe:	57 0b       	sbc	r21, r23
     ec0:	dc 01       	movw	r26, r24
     ec2:	ed 91       	ld	r30, X+
     ec4:	fc 91       	ld	r31, X
     ec6:	02 80       	ldd	r0, Z+2	; 0x02
     ec8:	f3 81       	ldd	r31, Z+3	; 0x03
     eca:	e0 2d       	mov	r30, r0
     ecc:	09 94       	ijmp

00000ece <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	8c 01       	movw	r16, r24
     edc:	7b 01       	movw	r14, r22
     ede:	d0 e0       	ldi	r29, 0x00	; 0
     ee0:	c0 e0       	ldi	r28, 0x00	; 0
     ee2:	f7 01       	movw	r30, r14
     ee4:	ec 0f       	add	r30, r28
     ee6:	fd 1f       	adc	r31, r29
     ee8:	64 91       	lpm	r22, Z
     eea:	66 23       	and	r22, r22
     eec:	61 f0       	breq	.+24     	; 0xf06 <Print::print(__FlashStringHelper const*)+0x38>
     eee:	d8 01       	movw	r26, r16
     ef0:	ed 91       	ld	r30, X+
     ef2:	fc 91       	ld	r31, X
     ef4:	01 90       	ld	r0, Z+
     ef6:	f0 81       	ld	r31, Z
     ef8:	e0 2d       	mov	r30, r0
     efa:	c8 01       	movw	r24, r16
     efc:	09 95       	icall
     efe:	89 2b       	or	r24, r25
     f00:	11 f0       	breq	.+4      	; 0xf06 <Print::print(__FlashStringHelper const*)+0x38>
     f02:	21 96       	adiw	r28, 0x01	; 1
     f04:	ee cf       	rjmp	.-36     	; 0xee2 <Print::print(__FlashStringHelper const*)+0x14>
     f06:	ce 01       	movw	r24, r28
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	08 95       	ret

00000f16 <Print::print(char const*)>:
_ZN5Print5writeEPKc():
     f16:	61 15       	cp	r22, r1
     f18:	71 05       	cpc	r23, r1
     f1a:	11 f0       	breq	.+4      	; 0xf20 <Print::print(char const*)+0xa>
     f1c:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	08 95       	ret

00000f26 <Print::print(char)>:
_ZN5Print5printEc():
     f26:	dc 01       	movw	r26, r24
     f28:	ed 91       	ld	r30, X+
     f2a:	fc 91       	ld	r31, X
     f2c:	01 90       	ld	r0, Z+
     f2e:	f0 81       	ld	r31, Z
     f30:	e0 2d       	mov	r30, r0
     f32:	09 94       	ijmp

00000f34 <Print::println()>:
_ZN5Print5writeEPKc():
     f34:	6d e2       	ldi	r22, 0x2D	; 45
     f36:	71 e0       	ldi	r23, 0x01	; 1
     f38:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <Print::write(char const*) [clone .part.2]>

00000f3c <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	ec 01       	movw	r28, r24
     f46:	0e 94 67 07 	call	0xece	; 0xece <Print::print(__FlashStringHelper const*)>
     f4a:	8c 01       	movw	r16, r24
     f4c:	ce 01       	movw	r24, r28
     f4e:	0e 94 9a 07 	call	0xf34	; 0xf34 <Print::println()>
     f52:	80 0f       	add	r24, r16
     f54:	91 1f       	adc	r25, r17
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	08 95       	ret

00000f60 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
     f60:	8f 92       	push	r8
     f62:	9f 92       	push	r9
     f64:	af 92       	push	r10
     f66:	bf 92       	push	r11
     f68:	ef 92       	push	r14
     f6a:	ff 92       	push	r15
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	a1 97       	sbiw	r28, 0x21	; 33
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	cd bf       	out	0x3d, r28	; 61
     f84:	7c 01       	movw	r14, r24
     f86:	fa 01       	movw	r30, r20
     f88:	cb 01       	movw	r24, r22
     f8a:	19 a2       	std	Y+33, r1	; 0x21
     f8c:	22 30       	cpi	r18, 0x02	; 2
     f8e:	08 f4       	brcc	.+2      	; 0xf92 <Print::printNumber(unsigned long, unsigned char)+0x32>
     f90:	2a e0       	ldi	r18, 0x0A	; 10
     f92:	8e 01       	movw	r16, r28
     f94:	0f 5d       	subi	r16, 0xDF	; 223
     f96:	1f 4f       	sbci	r17, 0xFF	; 255
     f98:	82 2e       	mov	r8, r18
     f9a:	91 2c       	mov	r9, r1
     f9c:	b1 2c       	mov	r11, r1
     f9e:	a1 2c       	mov	r10, r1
     fa0:	bf 01       	movw	r22, r30
     fa2:	a5 01       	movw	r20, r10
     fa4:	94 01       	movw	r18, r8
     fa6:	0e 94 8d 08 	call	0x111a	; 0x111a <__udivmodsi4>
     faa:	f9 01       	movw	r30, r18
     fac:	ca 01       	movw	r24, r20
     fae:	6a 30       	cpi	r22, 0x0A	; 10
     fb0:	0c f5       	brge	.+66     	; 0xff4 <Print::printNumber(unsigned long, unsigned char)+0x94>
     fb2:	60 5d       	subi	r22, 0xD0	; 208
     fb4:	d8 01       	movw	r26, r16
     fb6:	6e 93       	st	-X, r22
     fb8:	8d 01       	movw	r16, r26
     fba:	23 2b       	or	r18, r19
     fbc:	24 2b       	or	r18, r20
     fbe:	25 2b       	or	r18, r21
     fc0:	79 f7       	brne	.-34     	; 0xfa0 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	10 97       	sbiw	r26, 0x00	; 0
     fc8:	21 f0       	breq	.+8      	; 0xfd2 <Print::printNumber(unsigned long, unsigned char)+0x72>
     fca:	bd 01       	movw	r22, r26
     fcc:	c7 01       	movw	r24, r14
     fce:	0e 94 58 07 	call	0xeb0	; 0xeb0 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
     fd2:	a1 96       	adiw	r28, 0x21	; 33
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ff 90       	pop	r15
     fe8:	ef 90       	pop	r14
     fea:	bf 90       	pop	r11
     fec:	af 90       	pop	r10
     fee:	9f 90       	pop	r9
     ff0:	8f 90       	pop	r8
     ff2:	08 95       	ret
     ff4:	69 5c       	subi	r22, 0xC9	; 201
     ff6:	de cf       	rjmp	.-68     	; 0xfb4 <Print::printNumber(unsigned long, unsigned char)+0x54>

00000ff8 <Print::print(long, int)>:
_ZN5Print5printEli():
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	21 15       	cp	r18, r1
    100a:	31 05       	cpc	r19, r1
    100c:	81 f4       	brne	.+32     	; 0x102e <Print::print(long, int)+0x36>
    100e:	dc 01       	movw	r26, r24
    1010:	ed 91       	ld	r30, X+
    1012:	fc 91       	ld	r31, X
    1014:	01 90       	ld	r0, Z+
    1016:	f0 81       	ld	r31, Z
    1018:	e0 2d       	mov	r30, r0
    101a:	64 2f       	mov	r22, r20
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	09 94       	ijmp
    102e:	2a 30       	cpi	r18, 0x0A	; 10
    1030:	31 05       	cpc	r19, r1
    1032:	01 f5       	brne	.+64     	; 0x1074 <Print::print(long, int)+0x7c>
    1034:	2a e0       	ldi	r18, 0x0A	; 10
    1036:	77 ff       	sbrs	r23, 7
    1038:	1d c0       	rjmp	.+58     	; 0x1074 <Print::print(long, int)+0x7c>
    103a:	6a 01       	movw	r12, r20
    103c:	7b 01       	movw	r14, r22
    103e:	ec 01       	movw	r28, r24
    1040:	6d e2       	ldi	r22, 0x2D	; 45
    1042:	0e 94 93 07 	call	0xf26	; 0xf26 <Print::print(char)>
    1046:	8c 01       	movw	r16, r24
    1048:	44 27       	eor	r20, r20
    104a:	55 27       	eor	r21, r21
    104c:	ba 01       	movw	r22, r20
    104e:	4c 19       	sub	r20, r12
    1050:	5d 09       	sbc	r21, r13
    1052:	6e 09       	sbc	r22, r14
    1054:	7f 09       	sbc	r23, r15
    1056:	2a e0       	ldi	r18, 0x0A	; 10
    1058:	ce 01       	movw	r24, r28
    105a:	0e 94 b0 07 	call	0xf60	; 0xf60 <Print::printNumber(unsigned long, unsigned char)>
    105e:	80 0f       	add	r24, r16
    1060:	91 1f       	adc	r25, r17
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	df 90       	pop	r13
    1070:	cf 90       	pop	r12
    1072:	08 95       	ret
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	df 90       	pop	r13
    1082:	cf 90       	pop	r12
    1084:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <Print::printNumber(unsigned long, unsigned char)>

00001088 <Print::print(int, int)>:
_ZN5Print5printEii():
    1088:	9a 01       	movw	r18, r20
    108a:	ab 01       	movw	r20, r22
    108c:	77 0f       	add	r23, r23
    108e:	66 0b       	sbc	r22, r22
    1090:	77 0b       	sbc	r23, r23
    1092:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <Print::print(long, int)>

00001096 <Print::println(int, int)>:
_ZN5Print7printlnEii():
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	ec 01       	movw	r28, r24
    10a0:	0e 94 44 08 	call	0x1088	; 0x1088 <Print::print(int, int)>
    10a4:	8c 01       	movw	r16, r24
    10a6:	ce 01       	movw	r24, r28
    10a8:	0e 94 9a 07 	call	0xf34	; 0xf34 <Print::println()>
    10ac:	80 0f       	add	r24, r16
    10ae:	91 1f       	adc	r25, r17
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	08 95       	ret

000010ba <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    10ba:	21 15       	cp	r18, r1
    10bc:	31 05       	cpc	r19, r1
    10be:	41 f4       	brne	.+16     	; 0x10d0 <Print::print(unsigned long, int)+0x16>
    10c0:	dc 01       	movw	r26, r24
    10c2:	ed 91       	ld	r30, X+
    10c4:	fc 91       	ld	r31, X
    10c6:	01 90       	ld	r0, Z+
    10c8:	f0 81       	ld	r31, Z
    10ca:	e0 2d       	mov	r30, r0
    10cc:	64 2f       	mov	r22, r20
    10ce:	09 94       	ijmp
    10d0:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <Print::printNumber(unsigned long, unsigned char)>

000010d4 <Print::println(unsigned long, int)>:
_ZN5Print7printlnEmi():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:181
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	ec 01       	movw	r28, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:182
  size_t n = print(num, base);
    10de:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Print::print(unsigned long, int)>
    10e2:	8c 01       	movw	r16, r24
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:183
  n += println();
    10e4:	ce 01       	movw	r24, r28
    10e6:	0e 94 9a 07 	call	0xf34	; 0xf34 <Print::println()>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:185
  return n;
}
    10ea:	80 0f       	add	r24, r16
    10ec:	91 1f       	adc	r25, r17
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	08 95       	ret

000010f8 <initVariant>:
initVariant():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    10f8:	08 95       	ret

000010fa <main>:
main():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    10fa:	0e 94 8d 04 	call	0x91a	; 0x91a <init>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    10fe:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <initVariant>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1102:	0e 94 68 01 	call	0x2d0	; 0x2d0 <setup>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1106:	ce ea       	ldi	r28, 0xAE	; 174
    1108:	d5 e0       	ldi	r29, 0x05	; 5
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    110a:	0e 94 31 03 	call	0x662	; 0x662 <loop>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    110e:	20 97       	sbiw	r28, 0x00	; 0
    1110:	e1 f3       	breq	.-8      	; 0x110a <main+0x10>
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1112:	0e 94 ae 05 	call	0xb5c	; 0xb5c <serialEventRun()>
    1116:	f9 cf       	rjmp	.-14     	; 0x110a <main+0x10>

00001118 <yield>:
__empty():
C:\Users\user0\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    1118:	08 95       	ret

0000111a <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    111a:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    111c:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    111e:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1120:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1122:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1124:	0d c0       	rjmp	.+26     	; 0x1140 <__udivmodsi4_ep>

00001126 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1126:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1128:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    112a:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    112c:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    112e:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1130:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1132:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1134:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1136:	20 f0       	brcs	.+8      	; 0x1140 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1138:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    113a:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    113c:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    113e:	f5 0b       	sbc	r31, r21

00001140 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1140:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1142:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1144:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1146:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1148:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    114a:	69 f7       	brne	.-38     	; 0x1126 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    114c:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    114e:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1150:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1152:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1154:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1156:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1158:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    115a:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    115c:	08 95       	ret

0000115e <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    115e:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1160:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1162:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1164:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1166:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1168:	09 94       	ijmp

0000116a <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    116a:	f8 94       	cli

0000116c <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    116c:	ff cf       	rjmp	.-2      	; 0x116c <__stop_program>
